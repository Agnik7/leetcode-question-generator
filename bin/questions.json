[
    {
        "name": "Two Sum",
        "topic": "Array, Hash Table",
        "difficulty": "Easy",
        "link_id": "two-sum"
    },
    {
        "name": "Add Two Numbers",
        "topic": "Linked List, Math",
        "difficulty": "Medium",
        "link_id": "add-two-numbers"
    },
    {
        "name": "Longest Substring Without Repeating Characters",
        "topic": "String, Sliding Window",
        "difficulty": "Medium",
        "link_id": "longest-substring-without-repeating-characters"
    },
    {
        "name": "Median of Two Sorted Arrays",
        "topic": "Array, Binary Search, Divide and Conquer",
        "difficulty": "Hard",
        "link_id": "median-of-two-sorted-arrays"
    },
    {
        "name": "Longest Palindromic Substring",
        "topic": "String, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-palindromic-substring"
    },
    {
        "name": "ZigZag Conversion",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "zigzag-conversion"
    },
    {
        "name": "Reverse Integer",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "reverse-integer"
    },
    {
        "name": "String to Integer (atoi)",
        "topic": "String, Math",
        "difficulty": "Medium",
        "link_id": "string-to-integer-atoi"
    },
    {
        "name": "Palindrome Number",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "palindrome-number"
    },
    {
        "name": "Container With Most Water",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "container-with-most-water"
    },
    {
        "name": "Integer to Roman",
        "topic": "Math, Greedy",
        "difficulty": "Medium",
        "link_id": "integer-to-roman"
    },
    {
        "name": "Roman to Integer",
        "topic": "Math, String",
        "difficulty": "Easy",
        "link_id": "roman-to-integer"
    },
    {
        "name": "Longest Common Prefix",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "longest-common-prefix"
    },
    {
        "name": "3Sum",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "3sum"
    },
    {
        "name": "3Sum Closest",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "3sum-closest"
    },
    {
        "name": "Letter Combinations of a Phone Number",
        "topic": "String, Backtracking",
        "difficulty": "Medium",
        "link_id": "letter-combinations-of-a-phone-number"
    },
    {
        "name": "4Sum",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "4sum"
    },
    {
        "name": "Remove Nth Node From End of List",
        "topic": "Linked List, Two Pointers",
        "difficulty": "Medium",
        "link_id": "remove-nth-node-from-end-of-list"
    },
    {
        "name": "Valid Parentheses",
        "topic": "String, Stack",
        "difficulty": "Easy",
        "link_id": "valid-parentheses"
    },
    {
        "name": "Merge Two Sorted Lists",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "merge-two-sorted-lists"
    },
    {
        "name": "Generate Parentheses",
        "topic": "String, Backtracking",
        "difficulty": "Medium",
        "link_id": "generate-parentheses"
    },
    {
        "name": "Merge k Sorted Lists",
        "topic": "Linked List, Divide and Conquer, Heap",
        "difficulty": "Hard",
        "link_id": "merge-k-sorted-lists"
    },
    {
        "name": "Swap Nodes in Pairs",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "swap-nodes-in-pairs"
    },
    {
        "name": "Reverse Nodes in k-Group",
        "topic": "Linked List",
        "difficulty": "Hard",
        "link_id": "reverse-nodes-in-k-group"
    },
    {
        "name": "Remove Duplicates from Sorted Array",
        "topic": "Array, Two Pointers",
        "difficulty": "Easy",
        "link_id": "remove-duplicates-from-sorted-array"
    },
    {
        "name": "Remove Element",
        "topic": "Array, Two Pointers",
        "difficulty": "Easy",
        "link_id": "remove-element"
    },
    {
        "name": "Implement strStr()",
        "topic": "Two Pointers, String",
        "difficulty": "Easy",
        "link_id": "implement-strstr"
    },
    {
        "name": "Divide Two Integers",
        "topic": "Math, Binary Search",
        "difficulty": "Medium",
        "link_id": "divide-two-integers"
    },
    {
        "name": "Substring with Concatenation of All Words",
        "topic": "Hash Table, Two Pointers, String",
        "difficulty": "Hard",
        "link_id": "substring-with-concatenation-of-all-words"
    },
    {
        "name": "Next Permutation",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "next-permutation"
    },
    {
        "name": "Longest Valid Parentheses",
        "topic": "String, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "longest-valid-parentheses"
    },
    {
        "name": "Search in Rotated Sorted Array",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "search-in-rotated-sorted-array"
    },
    {
        "name": "Find First and Last Position of Element in Sorted Array",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "find-first-and-last-position-of-element-in-sorted-array"
    },
    {
        "name": "Search Insert Position",
        "topic": "Array, Binary Search",
        "difficulty": "Easy",
        "link_id": "search-insert-position"
    },
    {
        "name": "Valid Sudoku",
        "topic": "Hash Table",
        "difficulty": "Medium",
        "link_id": "valid-sudoku"
    },
    {
        "name": "Sudoku Solver",
        "topic": "Hash Table, Backtracking",
        "difficulty": "Hard",
        "link_id": "sudoku-solver"
    },
    {
        "name": "Count and Say",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "count-and-say"
    },
    {
        "name": "Combination Sum",
        "topic": "Array, Backtracking",
        "difficulty": "Medium",
        "link_id": "combination-sum"
    },
    {
        "name": "Combination Sum II",
        "topic": "Array, Backtracking",
        "difficulty": "Medium",
        "link_id": "combination-sum-ii"
    },
    {
        "name": "First Missing Positive",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "first-missing-positive"
    },
    {
        "name": "Trapping Rain Water",
        "topic": "Array, Two Pointers, Stack",
        "difficulty": "Hard",
        "link_id": "trapping-rain-water"
    },
    {
        "name": "Multiply Strings",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "multiply-strings"
    },
    {
        "name": "Wildcard Matching",
        "topic": "String, Dynamic Programming, Backtracking, Greedy",
        "difficulty": "Hard",
        "link_id": "wildcard-matching"
    },
    {
        "name": "Jump Game II",
        "topic": "Array, Greedy",
        "difficulty": "Hard",
        "link_id": "jump-game-ii"
    },
    {
        "name": "Permutations",
        "topic": "Backtracking",
        "difficulty": "Medium",
        "link_id": "permutations"
    },
    {
        "name": "Permutations II",
        "topic": "Backtracking",
        "difficulty": "Medium",
        "link_id": "permutations-ii"
    },
    {
        "name": "Rotate Image",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "rotate-image"
    },
    {
        "name": "Group Anagrams",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "group-anagrams"
    },
    {
        "name": "Pow(x, n)",
        "topic": "Math, Binary Search",
        "difficulty": "Medium",
        "link_id": "powx-n"
    },
    {
        "name": "N-Queens",
        "topic": "Backtracking",
        "difficulty": "Hard",
        "link_id": "n-queens"
    },
    {
        "name": "N-Queens II",
        "topic": "Backtracking",
        "difficulty": "Hard",
        "link_id": "n-queens-ii"
    },
    {
        "name": "Maximum Subarray",
        "topic": "Array, Divide and Conquer, Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "maximum-subarray"
    },
    {
        "name": "Spiral Matrix",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "spiral-matrix"
    },
    {
        "name": "Jump Game",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "jump-game"
    },
    {
        "name": "Merge Intervals",
        "topic": "Array, Sort",
        "difficulty": "Medium",
        "link_id": "merge-intervals"
    },
    {
        "name": "Insert Interval",
        "topic": "Array, Sort",
        "difficulty": "Hard",
        "link_id": "insert-interval"
    },
    {
        "name": "Length of Last Word",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "length-of-last-word"
    },
    {
        "name": "Spiral Matrix II",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "spiral-matrix-ii"
    },
    {
        "name": "Permutation Sequence",
        "topic": "Math, Backtracking",
        "difficulty": "Medium",
        "link_id": "permutation-sequence"
    },
    {
        "name": "Rotate List",
        "topic": "Linked List, Two Pointers",
        "difficulty": "Medium",
        "link_id": "rotate-list"
    },
    {
        "name": "Unique Paths",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "unique-paths"
    },
    {
        "name": "Unique Paths II",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "unique-paths-ii"
    },
    {
        "name": "Minimum Path Sum",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-path-sum"
    },
    {
        "name": "Valid Number",
        "topic": "Math, String",
        "difficulty": "Hard",
        "link_id": "valid-number"
    },
    {
        "name": "Plus One",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "plus-one"
    },
    {
        "name": "Add Binary",
        "topic": "Math, String",
        "difficulty": "Easy",
        "link_id": "add-binary"
    },
    {
        "name": "Text Justification",
        "topic": "String",
        "difficulty": "Hard",
        "link_id": "text-justification"
    },
    {
        "name": "Sqrt(x)",
        "topic": "Math, Binary Search",
        "difficulty": "Easy",
        "link_id": "sqrtx"
    },
    {
        "name": "Climbing Stairs",
        "topic": "Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "climbing-stairs"
    },
    {
        "name": "Simplify Path",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "simplify-path"
    },
    {
        "name": "Edit Distance",
        "topic": "String, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "edit-distance"
    },
    {
        "name": "Set Matrix Zeroes",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "set-matrix-zeroes"
    },
    {
        "name": "Search a 2D Matrix",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "search-a-2d-matrix"
    },
    {
        "name": "Sort Colors",
        "topic": "Array, Two Pointers, Sort",
        "difficulty": "Medium",
        "link_id": "sort-colors"
    },
    {
        "name": "Minimum Window Substring",
        "topic": "Hash Table, Two Pointers, String",
        "difficulty": "Hard",
        "link_id": "minimum-window-substring"
    },
    {
        "name": "Combinations",
        "topic": "Backtracking",
        "difficulty": "Medium",
        "link_id": "combinations"
    },
    {
        "name": "Subsets",
        "topic": "Array, Backtracking, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "subsets"
    },
    {
        "name": "Word Search",
        "topic": "Array, Backtracking",
        "difficulty": "Medium",
        "link_id": "word-search"
    },
    {
        "name": "Remove Duplicates from Sorted Array II",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "remove-duplicates-from-sorted-array-ii"
    },
    {
        "name": "Search in Rotated Sorted Array II",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "search-in-rotated-sorted-array-ii"
    },
    {
        "name": "Remove Duplicates from Sorted List II",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "remove-duplicates-from-sorted-list-ii"
    },
    {
        "name": "Remove Duplicates from Sorted List",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "remove-duplicates-from-sorted-list"
    },
    {
        "name": "Largest Rectangle in Histogram",
        "topic": "Array, Stack",
        "difficulty": "Hard",
        "link_id": "largest-rectangle-in-histogram"
    },
    {
        "name": "Maximal Rectangle",
        "topic": "Array, Hash Table, Dynamic Programming, Stack",
        "difficulty": "Hard",
        "link_id": "maximal-rectangle"
    },
    {
        "name": "Partition List",
        "topic": "Linked List, Two Pointers",
        "difficulty": "Medium",
        "link_id": "partition-list"
    },
    {
        "name": "Scramble String",
        "topic": "String, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "scramble-string"
    },
    {
        "name": "Merge Sorted Array",
        "topic": "Array, Two Pointers",
        "difficulty": "Easy",
        "link_id": "merge-sorted-array"
    },
    {
        "name": "Gray Code",
        "topic": "Math, Backtracking",
        "difficulty": "Medium",
        "link_id": "gray-code"
    },
    {
        "name": "Subsets II",
        "topic": "Array, Backtracking",
        "difficulty": "Medium",
        "link_id": "subsets-ii"
    },
    {
        "name": "Decode Ways",
        "topic": "String, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "decode-ways"
    },
    {
        "name": "Reverse Linked List II",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "reverse-linked-list-ii"
    },
    {
        "name": "Restore IP Addresses",
        "topic": "String, Backtracking",
        "difficulty": "Medium",
        "link_id": "restore-ip-addresses"
    },
    {
        "name": "Binary Tree Inorder Traversal",
        "topic": "Hash Table, Stack, Tree",
        "difficulty": "Medium",
        "link_id": "binary-tree-inorder-traversal"
    },
    {
        "name": "Unique Binary Search Trees II",
        "topic": "Dynamic Programming, Tree",
        "difficulty": "Medium",
        "link_id": "unique-binary-search-trees-ii"
    },
    {
        "name": "Unique Binary Search Trees",
        "topic": "Dynamic Programming, Tree",
        "difficulty": "Medium",
        "link_id": "unique-binary-search-trees"
    },
    {
        "name": "Interleaving String",
        "topic": "String, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "interleaving-string"
    },
    {
        "name": "Validate Binary Search Tree",
        "topic": "Tree, Depth-First Search, Recursion",
        "difficulty": "Medium",
        "link_id": "validate-binary-search-tree"
    },
    {
        "name": "Recover Binary Search Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "recover-binary-search-tree"
    },
    {
        "name": "Same Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "same-tree"
    },
    {
        "name": "Symmetric Tree",
        "topic": "Tree, Depth-First Search, Breadth-First Search",
        "difficulty": "Easy",
        "link_id": "symmetric-tree"
    },
    {
        "name": "Binary Tree Level Order Traversal",
        "topic": "Tree, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "binary-tree-level-order-traversal"
    },
    {
        "name": "Binary Tree Zigzag Level Order Traversal",
        "topic": "Tree, Breadth-First Search, Stack",
        "difficulty": "Medium",
        "link_id": "binary-tree-zigzag-level-order-traversal"
    },
    {
        "name": "Maximum Depth of Binary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-binary-tree"
    },
    {
        "name": "Construct Binary Tree from Preorder and Inorder Traversal",
        "topic": "Tree, Depth-First Search, Array, Divide and Conquer",
        "difficulty": "Medium",
        "link_id": "construct-binary-tree-from-preorder-and-inorder-traversal"
    },
    {
        "name": "Construct Binary Tree from Inorder and Postorder Traversal",
        "topic": "Tree, Depth-First Search, Array, Divide and Conquer",
        "difficulty": "Medium",
        "link_id": "construct-binary-tree-from-inorder-and-postorder-traversal"
    },
    {
        "name": "Binary Tree Level Order Traversal II",
        "topic": "Tree, Breadth-First Search",
        "difficulty": "Easy",
        "link_id": "binary-tree-level-order-traversal-ii"
    },
    {
        "name": "Convert Sorted Array to Binary Search Tree",
        "topic": "Tree, Depth-First Search, Array, Divide and Conquer",
        "difficulty": "Easy",
        "link_id": "convert-sorted-array-to-binary-search-tree"
    },
    {
        "name": "Convert Sorted List to Binary Search Tree",
        "topic": "Tree, Depth-First Search, Linked List, Divide and Conquer",
        "difficulty": "Medium",
        "link_id": "convert-sorted-list-to-binary-search-tree"
    },
    {
        "name": "Balanced Binary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "balanced-binary-tree"
    },
    {
        "name": "Minimum Depth of Binary Tree",
        "topic": "Tree, Depth-First Search, Breadth-First Search",
        "difficulty": "Easy",
        "link_id": "minimum-depth-of-binary-tree"
    },
    {
        "name": "Path Sum",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "path-sum"
    },
    {
        "name": "Path Sum II",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "path-sum-ii"
    },
    {
        "name": "Flatten Binary Tree to Linked List",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "flatten-binary-tree-to-linked-list"
    },
    {
        "name": "Populating Next Right Pointers in Each Node",
        "topic": "Tree, Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "populating-next-right-pointers-in-each-node"
    },
    {
        "name": "Populating Next Right Pointers in Each Node II",
        "topic": "Tree, Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "populating-next-right-pointers-in-each-node-ii"
    },
    {
        "name": "Pascal's Triangle",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "pascals-triangle"
    },
    {
        "name": "Pascal's Triangle II",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "pascals-triangle-ii"
    },
    {
        "name": "Triangle",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "triangle"
    },
    {
        "name": "Best Time to Buy and Sell Stock",
        "topic": "Array, Dynamic Programming, Greedy",
        "difficulty": "Easy",
        "link_id": "best-time-to-buy-and-sell-stock"
    },
    {
        "name": "Best Time to Buy and Sell Stock II",
        "topic": "Array, Greedy",
        "difficulty": "Easy",
        "link_id": "best-time-to-buy-and-sell-stock-ii"
    },
    {
        "name": "Best Time to Buy and Sell Stock III",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "best-time-to-buy-and-sell-stock-iii"
    },
    {
        "name": "Binary Tree Maximum Path Sum",
        "topic": "Tree, Depth-First Search, Divide and Conquer",
        "difficulty": "Hard",
        "link_id": "binary-tree-maximum-path-sum"
    },
    {
        "name": "Valid Palindrome",
        "topic": "Two Pointers, String",
        "difficulty": "Easy",
        "link_id": "valid-palindrome"
    },
    {
        "name": "Word Ladder II",
        "topic": "Breadth-First Search, String",
        "difficulty": "Hard",
        "link_id": "word-ladder-ii"
    },
    {
        "name": "Word Ladder",
        "topic": "Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "word-ladder"
    },
    {
        "name": "Longest Consecutive Sequence",
        "topic": "Array, Union Find",
        "difficulty": "Hard",
        "link_id": "longest-consecutive-sequence"
    },
    {
        "name": "Sum Root to Leaf Numbers",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "sum-root-to-leaf-numbers"
    },
    {
        "name": "Surrounded Regions",
        "topic": "Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "surrounded-regions"
    },
    {
        "name": "Palindrome Partitioning",
        "topic": "Backtracking, String",
        "difficulty": "Medium",
        "link_id": "palindrome-partitioning"
    },
    {
        "name": "Palindrome Partitioning II",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "palindrome-partitioning-ii"
    },
    {
        "name": "Clone Graph",
        "topic": "Depth-First Search, Breadth-First Search, Graph",
        "difficulty": "Medium",
        "link_id": "clone-graph"
    },
    {
        "name": "Gas Station",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "gas-station"
    },
    {
        "name": "Candy",
        "topic": "Greedy",
        "difficulty": "Hard",
        "link_id": "candy"
    },
    {
        "name": "Single Number",
        "topic": "Bit Manipulation, Hash Table",
        "difficulty": "Easy",
        "link_id": "single-number"
    },
    {
        "name": "Single Number II",
        "topic": "Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "single-number-ii"
    },
    {
        "name": "Copy List with Random Pointer",
        "topic": "Hash Table, Linked List",
        "difficulty": "Medium",
        "link_id": "copy-list-with-random-pointer"
    },
    {
        "name": "Word Break",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "word-break"
    },
    {
        "name": "Word Break II",
        "topic": "Dynamic Programming, Backtracking",
        "difficulty": "Hard",
        "link_id": "word-break-ii"
    },
    {
        "name": "Linked List Cycle",
        "topic": "Two Pointers, Linked List",
        "difficulty": "Easy",
        "link_id": "linked-list-cycle"
    },
    {
        "name": "Linked List Cycle II",
        "topic": "Two Pointers, Linked List",
        "difficulty": "Medium",
        "link_id": "linked-list-cycle-ii"
    },
    {
        "name": "Reorder List",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "reorder-list"
    },
    {
        "name": "Binary Tree Preorder Traversal",
        "topic": "Stack, Tree",
        "difficulty": "Medium",
        "link_id": "binary-tree-preorder-traversal"
    },
    {
        "name": "Binary Tree Postorder Traversal",
        "topic": "Stack, Tree",
        "difficulty": "Hard",
        "link_id": "binary-tree-postorder-traversal"
    },
    {
        "name": "LRU Cache",
        "topic": "Linked List, Design",
        "difficulty": "Medium",
        "link_id": "lru-cache"
    },
    {
        "name": "Insertion Sort List",
        "topic": "Linked List, Sort",
        "difficulty": "Medium",
        "link_id": "insertion-sort-list"
    },
    {
        "name": "Sort List",
        "topic": "Linked List, Sort",
        "difficulty": "Medium",
        "link_id": "sort-list"
    },
    {
        "name": "Max Points on a Line",
        "topic": "Hash Table, Math",
        "difficulty": "Hard",
        "link_id": "max-points-on-a-line"
    },
    {
        "name": "Evaluate Reverse Polish Notation",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "evaluate-reverse-polish-notation"
    },
    {
        "name": "Reverse Words in a String",
        "topic": "Two Pointers, String",
        "difficulty": "Medium",
        "link_id": "reverse-words-in-a-string"
    },
    {
        "name": "Maximum Product Subarray",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-product-subarray"
    },
    {
        "name": "Find Minimum in Rotated Sorted Array",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "find-minimum-in-rotated-sorted-array"
    },
    {
        "name": "Find Minimum in Rotated Sorted Array II",
        "topic": "Array, Binary Search",
        "difficulty": "Hard",
        "link_id": "find-minimum-in-rotated-sorted-array-ii"
    },
    {
        "name": "Min Stack",
        "topic": "Stack, Design",
        "difficulty": "Easy",
        "link_id": "min-stack"
    },
    {
        "name": "Binary Tree Upside Down",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "binary-tree-upside-down"
    },
    {
        "name": "Read N Characters Given Read4",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "read-n-characters-given-read4"
    },
    {
        "name": "Read N Characters Given Read4 II - Call multiple times",
        "topic": "String",
        "difficulty": "Hard",
        "link_id": "read-n-characters-given-read4-ii-call-multiple-times"
    },
    {
        "name": "Longest Substring with At Most Two Distinct Characters",
        "topic": "Two Pointers, String, Hash Table",
        "difficulty": "Medium",
        "link_id": "longest-substring-with-at-most-two-distinct-characters"
    },
    {
        "name": "Intersection of Two Linked Lists",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "intersection-of-two-linked-lists"
    },
    {
        "name": "One Edit Distance",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "one-edit-distance"
    },
    {
        "name": "Find Peak Element",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "find-peak-element"
    },
    {
        "name": "Missing Ranges",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "missing-ranges"
    },
    {
        "name": "Maximum Gap",
        "topic": "Array, Sort",
        "difficulty": "Hard",
        "link_id": "maximum-gap"
    },
    {
        "name": "Compare Version Numbers",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "compare-version-numbers"
    },
    {
        "name": "Fraction to Recurring Decimal",
        "topic": "Hash Table, Math",
        "difficulty": "Medium",
        "link_id": "fraction-to-recurring-decimal"
    },
    {
        "name": "Two Sum II - Input array is sorted",
        "topic": "Array, Two Pointers, Binary Search",
        "difficulty": "Easy",
        "link_id": "two-sum-ii-input-array-is-sorted"
    },
    {
        "name": "Excel Sheet Column Title",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "excel-sheet-column-title"
    },
    {
        "name": "Majority Element",
        "topic": "Array, Divide and Conquer, Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "majority-element"
    },
    {
        "name": "Two Sum III - Data structure design",
        "topic": "Design",
        "difficulty": "Easy",
        "link_id": "two-sum-iii-data-structure-design"
    },
    {
        "name": "Excel Sheet Column Number",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "excel-sheet-column-number"
    },
    {
        "name": "Factorial Trailing Zeroes",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "factorial-trailing-zeroes"
    },
    {
        "name": "Binary Search Tree Iterator",
        "topic": "Stack, Tree, Design",
        "difficulty": "Medium",
        "link_id": "binary-search-tree-iterator"
    },
    {
        "name": "Dungeon Game",
        "topic": "Binary Search, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "dungeon-game"
    },
    {
        "name": "Combine Two Tables",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "combine-two-tables"
    },
    {
        "name": "Second Highest Salary",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "second-highest-salary"
    },
    {
        "name": "Nth Highest Salary",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "nth-highest-salary"
    },
    {
        "name": "Rank Scores",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "rank-scores"
    },
    {
        "name": "Largest Number",
        "topic": "Sort",
        "difficulty": "Medium",
        "link_id": "largest-number"
    },
    {
        "name": "Consecutive Numbers",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "consecutive-numbers"
    },
    {
        "name": "Employees Earning More Than Their Managers",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "employees-earning-more-than-their-managers"
    },
    {
        "name": "Duplicate Emails",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "duplicate-emails"
    },
    {
        "name": "Customers Who Never Order",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "customers-who-never-order"
    },
    {
        "name": "Department Highest Salary",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "department-highest-salary"
    },
    {
        "name": "Department Top Three Salaries",
        "topic": "SQL",
        "difficulty": "Hard",
        "link_id": "department-top-three-salaries"
    },
    {
        "name": "Reverse Words in a String II",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "reverse-words-in-a-string-ii"
    },
    {
        "name": "Repeated DNA Sequences",
        "topic": "Hash Table, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "repeated-dna-sequences"
    },
    {
        "name": "Best Time to Buy and Sell Stock IV",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "best-time-to-buy-and-sell-stock-iv"
    },
    {
        "name": "Rotate Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "rotate-array"
    },
    {
        "name": "Reverse Bits",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "reverse-bits"
    },
    {
        "name": "Number of 1 Bits",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "number-of-1-bits"
    },
    {
        "name": "Word Frequency",
        "topic": "Shell",
        "difficulty": "Medium",
        "link_id": "word-frequency"
    },
    {
        "name": "Valid Phone Numbers",
        "topic": "Shell",
        "difficulty": "Easy",
        "link_id": "valid-phone-numbers"
    },
    {
        "name": "Transpose File",
        "topic": "Shell",
        "difficulty": "Medium",
        "link_id": "transpose-file"
    },
    {
        "name": "Tenth Line",
        "topic": "Shell",
        "difficulty": "Easy",
        "link_id": "tenth-line"
    },
    {
        "name": "Delete Duplicate Emails",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "delete-duplicate-emails"
    },
    {
        "name": "Rising Temperature",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "rising-temperature"
    },
    {
        "name": "House Robber",
        "topic": "Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "house-robber"
    },
    {
        "name": "Binary Tree Right Side View",
        "topic": "Tree, Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "binary-tree-right-side-view"
    },
    {
        "name": "Number of Islands",
        "topic": "Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "number-of-islands"
    },
    {
        "name": "Bitwise AND of Numbers Range",
        "topic": "Bit Manipulation, Math",
        "difficulty": "Medium",
        "link_id": "bitwise-and-of-numbers-range"
    },
    {
        "name": "Happy Number",
        "topic": "Math, Hash Table",
        "difficulty": "Easy",
        "link_id": "happy-number"
    },
    {
        "name": "Remove Linked List Elements",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "remove-linked-list-elements"
    },
    {
        "name": "Count Primes",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "count-primes"
    },
    {
        "name": "Isomorphic Strings",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "isomorphic-strings"
    },
    {
        "name": "Reverse Linked List",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "reverse-linked-list"
    },
    {
        "name": "Course Schedule",
        "topic": "Graph, Topological Sort, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "course-schedule"
    },
    {
        "name": "Implement Trie (Prefix Tree)",
        "topic": "Design, Trie",
        "difficulty": "Medium",
        "link_id": "implement-trie-prefix-tree"
    },
    {
        "name": "Minimum Size Subarray Sum",
        "topic": "Array, Two Pointers, Binary Search",
        "difficulty": "Medium",
        "link_id": "minimum-size-subarray-sum"
    },
    {
        "name": "Course Schedule II",
        "topic": "Graph, Topological Sort, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "course-schedule-ii"
    },
    {
        "name": "Add and Search Word - Data structure design",
        "topic": "Backtracking, Trie, Design",
        "difficulty": "Medium",
        "link_id": "add-and-search-word-data-structure-design"
    },
    {
        "name": "Word Search II",
        "topic": "Backtracking, Trie",
        "difficulty": "Hard",
        "link_id": "word-search-ii"
    },
    {
        "name": "House Robber II",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "house-robber-ii"
    },
    {
        "name": "Shortest Palindrome",
        "topic": "String, KMP Algorithm",
        "difficulty": "Hard",
        "link_id": "shortest-palindrome"
    },
    {
        "name": "Kth Largest Element in an Array",
        "topic": "Array, Divide and Conquer, Heap",
        "difficulty": "Medium",
        "link_id": "kth-largest-element-in-an-array"
    },
    {
        "name": "Combination Sum III",
        "topic": "Array, Backtracking",
        "difficulty": "Medium",
        "link_id": "combination-sum-iii"
    },
    {
        "name": "Contains Duplicate",
        "topic": "Array, Hash Table",
        "difficulty": "Easy",
        "link_id": "contains-duplicate"
    },
    {
        "name": "Contains Duplicate II",
        "topic": "Array, Hash Table",
        "difficulty": "Easy",
        "link_id": "contains-duplicate-ii"
    },
    {
        "name": "Contains Duplicate III",
        "topic": "Array, Sort, Binary Search, Ordered Map",
        "difficulty": "Medium",
        "link_id": "contains-duplicate-iii"
    },
    {
        "name": "Maximal Square",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximal-square"
    },
    {
        "name": "Count Complete Tree Nodes",
        "topic": "Tree, Binary Search",
        "difficulty": "Medium",
        "link_id": "count-complete-tree-nodes"
    },
    {
        "name": "Rectangle Area",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "rectangle-area"
    },
    {
        "name": "Basic Calculator",
        "topic": "Math, Stack",
        "difficulty": "Hard",
        "link_id": "basic-calculator"
    },
    {
        "name": "Implement Stack using Queues",
        "topic": "Stack, Design",
        "difficulty": "Easy",
        "link_id": "implement-stack-using-queues"
    },
    {
        "name": "Invert Binary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "invert-binary-tree"
    },
    {
        "name": "Basic Calculator II",
        "topic": "Math, Stack",
        "difficulty": "Medium",
        "link_id": "basic-calculator-ii"
    },
    {
        "name": "Summary Ranges",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "summary-ranges"
    },
    {
        "name": "Majority Element II",
        "topic": "Array, Boyer-Moore Voting Algorithm",
        "difficulty": "Medium",
        "link_id": "majority-element-ii"
    },
    {
        "name": "Kth Smallest Element in a BST",
        "topic": "Tree, Binary Search",
        "difficulty": "Medium",
        "link_id": "kth-smallest-element-in-a-bst"
    },
    {
        "name": "Power of Two",
        "topic": "Math, Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "power-of-two"
    },
    {
        "name": "Implement Queue using Stacks",
        "topic": "Queue, Design",
        "difficulty": "Easy",
        "link_id": "implement-queue-using-stacks"
    },
    {
        "name": "Number of Digit One",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "number-of-digit-one"
    },
    {
        "name": "Palindrome Linked List",
        "topic": "Linked List, Two Pointers",
        "difficulty": "Easy",
        "link_id": "palindrome-linked-list"
    },
    {
        "name": "Lowest Common Ancestor of a Binary Search Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "lowest-common-ancestor-of-a-binary-search-tree"
    },
    {
        "name": "Lowest Common Ancestor of a Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "lowest-common-ancestor-of-a-binary-tree"
    },
    {
        "name": "Delete Node in a Linked List",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "delete-node-in-a-linked-list"
    },
    {
        "name": "Product of Array Except Self",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "product-of-array-except-self"
    },
    {
        "name": "Sliding Window Maximum",
        "topic": "Array, Sliding Window, Dequeue",
        "difficulty": "Hard",
        "link_id": "sliding-window-maximum"
    },
    {
        "name": "Search a 2D Matrix II",
        "topic": "Binary Search, Divide and Conquer",
        "difficulty": "Medium",
        "link_id": "search-a-2d-matrix-ii"
    },
    {
        "name": "Different Ways to Add Parentheses",
        "topic": "Divide and Conquer",
        "difficulty": "Medium",
        "link_id": "different-ways-to-add-parentheses"
    },
    {
        "name": "Valid Anagram",
        "topic": "Hash Table, Sort",
        "difficulty": "Easy",
        "link_id": "valid-anagram"
    },
    {
        "name": "Binary Tree Paths",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "binary-tree-paths"
    },
    {
        "name": "Add Digits",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "add-digits"
    },
    {
        "name": "3Sum Smaller",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "3sum-smaller"
    },
    {
        "name": "Single Number III",
        "topic": "Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "single-number-iii"
    },
    {
        "name": "Graph Valid Tree",
        "topic": "Graph, Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "graph-valid-tree"
    },
    {
        "name": "Missing Number",
        "topic": "Array, Math, Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "missing-number"
    },
    {
        "name": "Alien Dictionary",
        "topic": "Graph, Topological Sort",
        "difficulty": "Hard",
        "link_id": "alien-dictionary"
    },
    {
        "name": "Closest Binary Search Tree Value",
        "topic": "Tree, Binary Search",
        "difficulty": "Easy",
        "link_id": "closest-binary-search-tree-value"
    },
    {
        "name": "Encode and Decode Strings",
        "topic": "String, Design",
        "difficulty": "Medium",
        "link_id": "encode-and-decode-strings"
    },
    {
        "name": "Closest Binary Search Tree Value II",
        "topic": "Tree, Binary Search",
        "difficulty": "Hard",
        "link_id": "closest-binary-search-tree-value-ii"
    },
    {
        "name": "Integer to English Words",
        "topic": "Math, String",
        "difficulty": "Hard",
        "link_id": "integer-to-english-words"
    },
    {
        "name": "H-Index",
        "topic": "Array, Sort",
        "difficulty": "Medium",
        "link_id": "h-index"
    },
    {
        "name": "H-Index II",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "h-index-ii"
    },
    {
        "name": "Paint Fence",
        "topic": "Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "paint-fence"
    },
    {
        "name": "Find the Celebrity",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "find-the-celebrity"
    },
    {
        "name": "First Bad Version",
        "topic": "Binary Search",
        "difficulty": "Easy",
        "link_id": "first-bad-version"
    },
    {
        "name": "Perfect Squares",
        "topic": "Math, Dynamic Programming, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "perfect-squares"
    },
    {
        "name": "Wiggle Sort",
        "topic": "Array, Sort",
        "difficulty": "Medium",
        "link_id": "wiggle-sort"
    },
    {
        "name": "Zigzag Iterator",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "zigzag-iterator"
    },
    {
        "name": "Expression Add Operators",
        "topic": "String, Backtracking",
        "difficulty": "Hard",
        "link_id": "expression-add-operators"
    },
    {
        "name": "Move Zeroes",
        "topic": "Array, Two Pointers",
        "difficulty": "Easy",
        "link_id": "move-zeroes"
    },
    {
        "name": "Peeking Iterator",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "peeking-iterator"
    },
    {
        "name": "Inorder Successor in BST",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "inorder-successor-in-bst"
    },
    {
        "name": "Walls and Gates",
        "topic": "Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "walls-and-gates"
    },
    {
        "name": "Find the Duplicate Number",
        "topic": "Array, Two Pointers, Binary Search",
        "difficulty": "Medium",
        "link_id": "find-the-duplicate-number"
    },
    {
        "name": "Unique Word Abbreviation",
        "topic": "Hash Table, Design",
        "difficulty": "Medium",
        "link_id": "unique-word-abbreviation"
    },
    {
        "name": "Game of Life",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "game-of-life"
    },
    {
        "name": "Word Pattern",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "word-pattern"
    },
    {
        "name": "Word Pattern II",
        "topic": "Backtracking",
        "difficulty": "Hard",
        "link_id": "word-pattern-ii"
    },
    {
        "name": "Nim Game",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "nim-game"
    },
    {
        "name": "Flip Game",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "flip-game"
    },
    {
        "name": "Flip Game II",
        "topic": "Backtracking",
        "difficulty": "Medium",
        "link_id": "flip-game-ii"
    },
    {
        "name": "Find Median from Data Stream",
        "topic": "Heap, Design",
        "difficulty": "Hard",
        "link_id": "find-median-from-data-stream"
    },
    {
        "name": "Best Meeting Point",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "best-meeting-point"
    },
    {
        "name": "Serialize and Deserialize Binary Tree",
        "topic": "Tree, Design",
        "difficulty": "Hard",
        "link_id": "serialize-and-deserialize-binary-tree"
    },
    {
        "name": "Binary Tree Longest Consecutive Sequence",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "binary-tree-longest-consecutive-sequence"
    },
    {
        "name": "Bulls and Cows",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "bulls-and-cows"
    },
    {
        "name": "Longest Increasing Subsequence",
        "topic": "Array, Binary Search, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-increasing-subsequence"
    },
    {
        "name": "Range Sum Query - Immutable",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "range-sum-query-immutable"
    },
    {
        "name": "Range Sum Query 2D - Immutable",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "range-sum-query-2d-immutable"
    },
    {
        "name": "Additive Number",
        "topic": "Math, Backtracking",
        "difficulty": "Medium",
        "link_id": "additive-number"
    },
    {
        "name": "Range Sum Query - Mutable",
        "topic": "Array, Binary Indexed Tree, Segment Tree",
        "difficulty": "Medium",
        "link_id": "range-sum-query-mutable"
    },
    {
        "name": "Best Time to Buy and Sell Stock with Cooldown",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "best-time-to-buy-and-sell-stock-with-cooldown"
    },
    {
        "name": "Minimum Height Trees",
        "topic": "Graph, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "minimum-height-trees"
    },
    {
        "name": "Burst Balloons",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "burst-balloons"
    },
    {
        "name": "Super Ugly Number",
        "topic": "Math, Heap",
        "difficulty": "Medium",
        "link_id": "super-ugly-number"
    },
    {
        "name": "Count of Smaller Numbers After Self",
        "topic": "Binary Search, Divide and Conquer, Sort",
        "difficulty": "Hard",
        "link_id": "count-of-smaller-numbers-after-self"
    },
    {
        "name": "Remove Duplicate Letters",
        "topic": "Stack, Greedy",
        "difficulty": "Hard",
        "link_id": "remove-duplicate-letters"
    },
    {
        "name": "Shortest Distance from All Buildings",
        "topic": "Breadth-First Search",
        "difficulty": "Hard",
        "link_id": "shortest-distance-from-all-buildings"
    },
    {
        "name": "Maximum Product of Word Lengths",
        "topic": "Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "maximum-product-of-word-lengths"
    },
    {
        "name": "Bulb Switcher",
        "topic": "Math, Brainteaser",
        "difficulty": "Medium",
        "link_id": "bulb-switcher"
    },
    {
        "name": "Generalized Abbreviation",
        "topic": "Bit Manipulation, Backtracking",
        "difficulty": "Medium",
        "link_id": "generalized-abbreviation"
    },
    {
        "name": "Create Maximum Number",
        "topic": "Greedy, Divide and Conquer",
        "difficulty": "Hard",
        "link_id": "create-maximum-number"
    },
    {
        "name": "Coin Change",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "coin-change"
    },
    {
        "name": "Verify Preorder Serialization of a Binary Tree",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "verify-preorder-serialization-of-a-binary-tree"
    },
    {
        "name": "Reconstruct Itinerary",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "reconstruct-itinerary"
    },
    {
        "name": "Increasing Triplet Subsequence",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "increasing-triplet-subsequence"
    },
    {
        "name": "Palindrome Pairs",
        "topic": "Hash Table, String, Trie",
        "difficulty": "Hard",
        "link_id": "palindrome-pairs"
    },
    {
        "name": "House Robber III",
        "topic": "Dynamic Programming, Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "house-robber-iii"
    },
    {
        "name": "Counting Bits",
        "topic": "Dynamic Programming, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "counting-bits"
    },
    {
        "name": "Top K Frequent Elements",
        "topic": "Hash Table, Heap",
        "difficulty": "Medium",
        "link_id": "top-k-frequent-elements"
    },
    {
        "name": "Intersection of Two Arrays",
        "topic": "Hash Table, Two Pointers, Binary Search, Sort",
        "difficulty": "Easy",
        "link_id": "intersection-of-two-arrays"
    },
    {
        "name": "Intersection of Two Arrays II",
        "topic": "Hash Table, Two Pointers, Binary Search, Sort",
        "difficulty": "Easy",
        "link_id": "intersection-of-two-arrays-ii"
    },
    {
        "name": "Data Stream as Disjoint Intervals",
        "topic": "Binary Search Tree",
        "difficulty": "Hard",
        "link_id": "data-stream-as-disjoint-intervals"
    },
    {
        "name": "Russian Doll Envelopes",
        "topic": "Binary Search, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "russian-doll-envelopes"
    },
    {
        "name": "Design Twitter",
        "topic": "Hash Table, Design, Heap",
        "difficulty": "Medium",
        "link_id": "design-twitter"
    },
    {
        "name": "Count Numbers with Unique Digits",
        "topic": "Math, Backtracking, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "count-numbers-with-unique-digits"
    },
    {
        "name": "Rearrange String k Distance Apart",
        "topic": "Heap, Greedy, String",
        "difficulty": "Hard",
        "link_id": "rearrange-string-k-distance-apart"
    },
    {
        "name": "Logger Rate Limiter",
        "topic": "Hash Table, Design",
        "difficulty": "Easy",
        "link_id": "logger-rate-limiter"
    },
    {
        "name": "Sort Transformed Array",
        "topic": "Math, Two Pointers",
        "difficulty": "Medium",
        "link_id": "sort-transformed-array"
    },
    {
        "name": "Bomb Enemy",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "bomb-enemy"
    },
    {
        "name": "Design Hit Counter",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-hit-counter"
    },
    {
        "name": "Max Sum of Rectangle No Larger Than K",
        "topic": "Binary Search, Dynamic Programming, Queue",
        "difficulty": "Hard",
        "link_id": "max-sum-of-rectangle-no-larger-than-k"
    },
    {
        "name": "Nested List Weight Sum II",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "nested-list-weight-sum-ii"
    },
    {
        "name": "Water and Jug Problem",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "water-and-jug-problem"
    },
    {
        "name": "Find Leaves of Binary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "find-leaves-of-binary-tree"
    },
    {
        "name": "Valid Perfect Square",
        "topic": "Math, Binary Search",
        "difficulty": "Easy",
        "link_id": "valid-perfect-square"
    },
    {
        "name": "Largest Divisible Subset",
        "topic": "Dynamic Programming, Math",
        "difficulty": "Medium",
        "link_id": "largest-divisible-subset"
    },
    {
        "name": "Plus One Linked List",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "plus-one-linked-list"
    },
    {
        "name": "Range Addition",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "range-addition"
    },
    {
        "name": "Sum of Two Integers",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "sum-of-two-integers"
    },
    {
        "name": "Super Pow",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "super-pow"
    },
    {
        "name": "Find K Pairs with Smallest Sums",
        "topic": "Heap",
        "difficulty": "Medium",
        "link_id": "find-k-pairs-with-smallest-sums"
    },
    {
        "name": "Guess Number Higher or Lower",
        "topic": "Binary Search",
        "difficulty": "Easy",
        "link_id": "guess-number-higher-or-lower"
    },
    {
        "name": "Guess Number Higher or Lower II",
        "topic": "Dynamic Programming, Minimax",
        "difficulty": "Medium",
        "link_id": "guess-number-higher-or-lower-ii"
    },
    {
        "name": "Wiggle Subsequence",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "wiggle-subsequence"
    },
    {
        "name": "Combination Sum IV",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "combination-sum-iv"
    },
    {
        "name": "Kth Smallest Element in a Sorted Matrix",
        "topic": "Binary Search, Heap",
        "difficulty": "Medium",
        "link_id": "kth-smallest-element-in-a-sorted-matrix"
    },
    {
        "name": "Design Phone Directory",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-phone-directory"
    },
    {
        "name": "Insert Delete GetRandom O(1)",
        "topic": "Array, Hash Table, Design",
        "difficulty": "Medium",
        "link_id": "insert-delete-getrandom-o1"
    },
    {
        "name": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "topic": "Array, Hash Table, Design",
        "difficulty": "Hard",
        "link_id": "insert-delete-getrandom-o1-duplicates-allowed"
    },
    {
        "name": "Linked List Random Node",
        "topic": "Reservoir Sampling",
        "difficulty": "Medium",
        "link_id": "linked-list-random-node"
    },
    {
        "name": "Ransom Note",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "ransom-note"
    },
    {
        "name": "Shuffle an Array",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "shuffle-an-array"
    },
    {
        "name": "Mini Parser",
        "topic": "Stack, String",
        "difficulty": "Medium",
        "link_id": "mini-parser"
    },
    {
        "name": "Lexicographical Numbers",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "lexicographical-numbers"
    },
    {
        "name": "First Unique Character in a String",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "first-unique-character-in-a-string"
    },
    {
        "name": "Longest Absolute File Path",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "longest-absolute-file-path"
    },
    {
        "name": "Find the Difference",
        "topic": "Hash Table, Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "find-the-difference"
    },
    {
        "name": "Elimination Game",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "elimination-game"
    },
    {
        "name": "Perfect Rectangle",
        "topic": "Line Sweep",
        "difficulty": "Hard",
        "link_id": "perfect-rectangle"
    },
    {
        "name": "Is Subsequence",
        "topic": "Binary Search, Dynamic Programming, Greedy",
        "difficulty": "Easy",
        "link_id": "is-subsequence"
    },
    {
        "name": "UTF-8 Validation",
        "topic": "Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "utf-8-validation"
    },
    {
        "name": "Decode String",
        "topic": "Stack, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "decode-string"
    },
    {
        "name": "Longest Substring with At Least K Repeating Characters",
        "topic": "Divide and Conquer, Sliding Window, Recursion",
        "difficulty": "Medium",
        "link_id": "longest-substring-with-at-least-k-repeating-characters"
    },
    {
        "name": "Rotate Function",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "rotate-function"
    },
    {
        "name": "Integer Replacement",
        "topic": "Math, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "integer-replacement"
    },
    {
        "name": "Random Pick Index",
        "topic": "Reservoir Sampling",
        "difficulty": "Medium",
        "link_id": "random-pick-index"
    },
    {
        "name": "Evaluate Division",
        "topic": "Graph, Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "evaluate-division"
    },
    {
        "name": "Nth Digit",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "nth-digit"
    },
    {
        "name": "Binary Watch",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "binary-watch"
    },
    {
        "name": "Remove K Digits",
        "topic": "Greedy, Stack",
        "difficulty": "Medium",
        "link_id": "remove-k-digits"
    },
    {
        "name": "Sum of Left Leaves",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "sum-of-left-leaves"
    },
    {
        "name": "Convert a Number to Hexadecimal",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "convert-a-number-to-hexadecimal"
    },
    {
        "name": "Queue Reconstruction by Height",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "queue-reconstruction-by-height"
    },
    {
        "name": "Trapping Rain Water II",
        "topic": "Heap, Breadth-First Search",
        "difficulty": "Hard",
        "link_id": "trapping-rain-water-ii"
    },
    {
        "name": "Longest Palindrome",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "longest-palindrome"
    },
    {
        "name": "Arithmetic Slices",
        "topic": "Math, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "arithmetic-slices"
    },
    {
        "name": "Fizz Buzz",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "fizz-buzz"
    },
    {
        "name": "Third Maximum Number",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "third-maximum-number"
    },
    {
        "name": "Add Strings",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "add-strings"
    },
    {
        "name": "Partition Equal Subset Sum",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "partition-equal-subset-sum"
    },
    {
        "name": "Pacific Atlantic Water Flow",
        "topic": "Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "pacific-atlantic-water-flow"
    },
    {
        "name": "Word Squares",
        "topic": "Backtracking, Trie",
        "difficulty": "Hard",
        "link_id": "word-squares"
    },
    {
        "name": "Convert Binary Search Tree to Sorted Doubly Linked List",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "convert-binary-search-tree-to-sorted-doubly-linked-list"
    },
    {
        "name": "Construct Quad Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "construct-quad-tree"
    },
    {
        "name": "N-ary Tree Level Order Traversal",
        "topic": "Tree, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "n-ary-tree-level-order-traversal"
    },
    {
        "name": "Flatten a Multilevel Doubly Linked List",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "flatten-a-multilevel-doubly-linked-list"
    },
    {
        "name": "Encode N-ary Tree to Binary Tree",
        "topic": "Tree",
        "difficulty": "Hard",
        "link_id": "encode-n-ary-tree-to-binary-tree"
    },
    {
        "name": "All O`one Data Structure",
        "topic": "Design, Linked List",
        "difficulty": "Hard",
        "link_id": "all-oone-data-structure"
    },
    {
        "name": "Minimum Genetic Mutation",
        "topic": "Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "minimum-genetic-mutation"
    },
    {
        "name": "Non-overlapping Intervals",
        "topic": "Greedy, Sort",
        "difficulty": "Medium",
        "link_id": "non-overlapping-intervals"
    },
    {
        "name": "Find Right Interval",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "find-right-interval"
    },
    {
        "name": "Path Sum III",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "path-sum-iii"
    },
    {
        "name": "Find All Anagrams in a String",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "find-all-anagrams-in-a-string"
    },
    {
        "name": "Number of Boomerangs",
        "topic": "Hash Table, Math",
        "difficulty": "Easy",
        "link_id": "number-of-boomerangs"
    },
    {
        "name": "Find All Numbers Disappeared in an Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-all-numbers-disappeared-in-an-array"
    },
    {
        "name": "Serialize and Deserialize BST",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "serialize-and-deserialize-bst"
    },
    {
        "name": "Delete Node in a BST",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "delete-node-in-a-bst"
    },
    {
        "name": "Sort Characters By Frequency",
        "topic": "Hash Table, Heap",
        "difficulty": "Medium",
        "link_id": "sort-characters-by-frequency"
    },
    {
        "name": "Minimum Number of Arrows to Burst Balloons",
        "topic": "Greedy, Sort",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-arrows-to-burst-balloons"
    },
    {
        "name": "Minimum Moves to Equal Array Elements",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "minimum-moves-to-equal-array-elements"
    },
    {
        "name": "4Sum II",
        "topic": "Hash Table, Binary Search",
        "difficulty": "Medium",
        "link_id": "4sum-ii"
    },
    {
        "name": "Assign Cookies",
        "topic": "Greedy",
        "difficulty": "Easy",
        "link_id": "assign-cookies"
    },
    {
        "name": "132 Pattern",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "132-pattern"
    },
    {
        "name": "Circular Array Loop",
        "topic": "Two Pointers",
        "difficulty": "Medium",
        "link_id": "circular-array-loop"
    },
    {
        "name": "Poor Pigs",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "poor-pigs"
    },
    {
        "name": "Repeated Substring Pattern",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "repeated-substring-pattern"
    },
    {
        "name": "Can I Win",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "can-i-win"
    },
    {
        "name": "Unique Substrings in Wraparound String",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "unique-substrings-in-wraparound-string"
    },
    {
        "name": "Validate IP Address",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "validate-ip-address"
    },
    {
        "name": "Implement Rand10() Using Rand7()",
        "topic": "Random",
        "difficulty": "Medium",
        "link_id": "implement-rand10-using-rand7"
    },
    {
        "name": "Minimum Time Difference",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "minimum-time-difference"
    },
    {
        "name": "Single Element in a Sorted Array",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "single-element-in-a-sorted-array"
    },
    {
        "name": "Detect Capital",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "detect-capital"
    },
    {
        "name": "Shortest Unsorted Continuous Subarray",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "shortest-unsorted-continuous-subarray"
    },
    {
        "name": "Reverse String II",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-string-ii"
    },
    {
        "name": "01 Matrix",
        "topic": "Dynamic Programming, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "01-matrix"
    },
    {
        "name": "Diameter of Binary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "diameter-of-binary-tree"
    },
    {
        "name": "Maximum Consecutive Ones",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "maximum-consecutive-ones"
    },
    {
        "name": "Permutation in String",
        "topic": "Two Pointers, Sliding Window",
        "difficulty": "Medium",
        "link_id": "permutation-in-string"
    },
    {
        "name": "Reshape the Matrix",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "reshape-the-matrix"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Longest Line of Consecutive One in Matrix",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-line-of-consecutive-one-in-matrix"
    },
    {
        "name": "Binary Tree Tilt",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "binary-tree-tilt"
    },
    {
        "name": "Game Play Analysis IV",
        "topic": "Window Function",
        "difficulty": "Medium",
        "link_id": "game-play-analysis-iv"
    },
    {
        "name": "Student Attendance Record I",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "student-attendance-record-i"
    },
    {
        "name": "Complex Number Multiplication",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "complex-number-multiplication"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Longest Line of Consecutive One in Matrix",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-line-of-consecutive-one-in-matrix"
    },
    {
        "name": "Binary Tree Tilt",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "binary-tree-tilt"
    },
    {
        "name": "Game Play Analysis IV",
        "topic": "Window Function",
        "difficulty": "Medium",
        "link_id": "game-play-analysis-iv"
    },
    {
        "name": "Student Attendance Record I",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "student-attendance-record-i"
    },
    {
        "name": "Complex Number Multiplication",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "complex-number-multiplication"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Longest Line of Consecutive One in Matrix",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-line-of-consecutive-one-in-matrix"
    },
    {
        "name": "Binary Tree Tilt",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "binary-tree-tilt"
    },
    {
        "name": "Game Play Analysis IV",
        "topic": "Window Function",
        "difficulty": "Medium",
        "link_id": "game-play-analysis-iv"
    },
    {
        "name": "Student Attendance Record I",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "student-attendance-record-i"
    },
    {
        "name": "Complex Number Multiplication",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "complex-number-multiplication"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Longest Line of Consecutive One in Matrix",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-line-of-consecutive-one-in-matrix"
    },
    {
        "name": "Binary Tree Tilt",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "binary-tree-tilt"
    },
    {
        "name": "Game Play Analysis IV",
        "topic": "Window Function",
        "difficulty": "Medium",
        "link_id": "game-play-analysis-iv"
    },
    {
        "name": "Student Attendance Record I",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "student-attendance-record-i"
    },
    {
        "name": "Complex Number Multiplication",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "complex-number-multiplication"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Longest Line of Consecutive One in Matrix",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-line-of-consecutive-one-in-matrix"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Maximum Consecutive Ones",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "maximum-consecutive-ones"
    },
    {
        "name": "Permutation in String",
        "topic": "Two Pointers, Sliding Window",
        "difficulty": "Medium",
        "link_id": "permutation-in-string"
    },
    {
        "name": "Reshape the Matrix",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "reshape-the-matrix"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Complex Number Multiplication",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "complex-number-multiplication"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Game Play Analysis IV",
        "topic": "Window Function",
        "difficulty": "Medium",
        "link_id": "game-play-analysis-iv"
    },
    {
        "name": "Student Attendance Record I",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "student-attendance-record-i"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Array Partition I",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "array-partition-i"
    },
    {
        "name": "Maximum Consecutive Ones",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "maximum-consecutive-ones"
    },
    {
        "name": "Permutation in String",
        "topic": "Two Pointers, Sliding Window",
        "difficulty": "Medium",
        "link_id": "permutation-in-string"
    },
    {
        "name": "Reshape the Matrix",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "reshape-the-matrix"
    },
    {
        "name": "Subarray Sum Equals K",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "subarray-sum-equals-k"
    },
    {
        "name": "Complex Number Multiplication",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "complex-number-multiplication"
    },
    {
        "name": "Reverse Words in a String III",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reverse-words-in-a-string-iii"
    },
    {
        "name": "Quad Tree Intersection",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "quad-tree-intersection"
    },
    {
        "name": "Maximum Depth of N-ary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "maximum-depth-of-n-ary-tree"
    },
    {
        "name": "Human Traffic of Stadium",
        "topic": "Database",
        "difficulty": "Hard",
        "link_id": "human-traffic-of-stadium"
    },
    {
        "name": "Consecutive Available Seats",
        "topic": "Database",
        "difficulty": "Easy",
        "link_id": "consecutive-available-seats"
    },
    {
        "name": "Design Compressed String Iterator",
        "topic": "Design",
        "difficulty": "Easy",
        "link_id": "design-compressed-string-iterator"
    },
    {
        "name": "Can Place Flowers",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "can-place-flowers"
    },
    {
        "name": "Construct String from Binary Tree",
        "topic": "String, Tree",
        "difficulty": "Easy",
        "link_id": "construct-string-from-binary-tree"
    },
    {
        "name": "Find Duplicate File in System",
        "topic": "String, Hash Table",
        "difficulty": "Medium",
        "link_id": "find-duplicate-file-in-system"
    },
    {
        "name": "Valid Triangle Number",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "valid-triangle-number"
    },
    {
        "name": "Triangle Judgement",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "triangle-judgement"
    },
    {
        "name": "Second Degree Follower",
        "topic": "Database",
        "difficulty": "Medium",
        "link_id": "second-degree-follower"
    },
    {
        "name": "Add Bold Tag in String",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "add-bold-tag-in-string"
    },
    {
        "name": "Merge Two Binary Trees",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "merge-two-binary-trees"
    },
    {
        "name": "Add One Row to Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "add-one-row-to-tree"
    },
    {
        "name": "Maximum Distance in Arrays",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "maximum-distance-in-arrays"
    },
    {
        "name": "Minimum Factorization",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "minimum-factorization"
    },
    {
        "name": "Exchange Seats",
        "topic": "Database",
        "difficulty": "Medium",
        "link_id": "exchange-seats"
    },
    {
        "name": "Swap Salary",
        "topic": "Database",
        "difficulty": "Unknown",
        "link_id": "swap-salary"
    },
    {
        "name": "Maximum Product of Three Numbers",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "maximum-product-of-three-numbers"
    },
    {
        "name": "K Inverse Pairs Array",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "k-inverse-pairs-array"
    },
    {
        "name": "Course Schedule III",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "course-schedule-iii"
    },
    {
        "name": "Sum of Square Numbers",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "sum-of-square-numbers"
    },
    {
        "name": "Find the Derangement of An Array",
        "topic": "Dynamic Programming, Math",
        "difficulty": "Medium",
        "link_id": "find-the-derangement-of-an-array"
    },
    {
        "name": "Design Log Storage System",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-log-storage-system"
    },
    {
        "name": "Exclusive Time of Functions",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "exclusive-time-of-functions"
    },
    {
        "name": "Average of Levels in Binary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "average-of-levels-in-binary-tree"
    },
    {
        "name": "Shopping Offers",
        "topic": "Backtracking, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "shopping-offers"
    },
    {
        "name": "Decode Ways II",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "decode-ways-ii"
    },
    {
        "name": "Solve the Equation",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "solve-the-equation"
    },
    {
        "name": "Design Circular Deque",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-circular-deque"
    },
    {
        "name": "Design Search Autocomplete System",
        "topic": "Design, Trie",
        "difficulty": "Hard",
        "link_id": "design-search-autocomplete-system"
    },
    {
        "name": "Maximum Length of Pair Chain",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "maximum-length-of-pair-chain"
    },
    {
        "name": "Palindromic Substrings",
        "topic": "String, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "palindromic-substrings"
    },
    {
        "name": "Replace Words",
        "topic": "String, Trie",
        "difficulty": "Medium",
        "link_id": "replace-words"
    },
    {
        "name": "Dota2 Senate",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "dota2-senate"
    },
    {
        "name": "2 Keys Keyboard",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "2-keys-keyboard"
    },
    {
        "name": "4 Keys Keyboard",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "4-keys-keyboard"
    },
    {
        "name": "Find Duplicate Subtrees",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "find-duplicate-subtrees"
    },
    {
        "name": "Two Sum IV - Input is a BST",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "two-sum-iv-input-is-a-bst"
    },
    {
        "name": "Maximum Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "maximum-binary-tree"
    },
    {
        "name": "Print Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "print-binary-tree"
    },
    {
        "name": "Coin Path",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "coin-path"
    },
    {
        "name": "Robot Return to Origin",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "robot-return-to-origin"
    },
    {
        "name": "Find K Closest Elements",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "find-k-closest-elements"
    },
    {
        "name": "Split Array into Consecutive Subsequences",
        "topic": "Array, Greedy, Heap",
        "difficulty": "Medium",
        "link_id": "split-array-into-consecutive-subsequences"
    },
    {
        "name": "Remove 9",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "remove-9"
    },
    {
        "name": "Image Smoother",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "image-smoother"
    },
    {
        "name": "Maximum Width of Binary Tree",
        "topic": "Tree, Breadth-first Search",
        "difficulty": "Medium",
        "link_id": "maximum-width-of-binary-tree"
    },
    {
        "name": "Equal Tree Partition",
        "topic": "Tree, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "equal-tree-partition"
    },
    {
        "name": "Strange Printer",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "strange-printer"
    },
    {
        "name": "Non-decreasing Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "non-decreasing-array"
    },
    {
        "name": "Path Sum IV",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "path-sum-iv"
    },
    {
        "name": "Beautiful Arrangement II",
        "topic": "Array, Math",
        "difficulty": "Medium",
        "link_id": "beautiful-arrangement-ii"
    },
    {
        "name": "Kth Smallest Number in Multiplication Table",
        "topic": "Binary Search",
        "difficulty": "Hard",
        "link_id": "kth-smallest-number-in-multiplication-table"
    },
    {
        "name": "Trim a Binary Search Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "trim-a-binary-search-tree"
    },
    {
        "name": "Maximum Swap",
        "topic": "Array, Math",
        "difficulty": "Medium",
        "link_id": "maximum-swap"
    },
    {
        "name": "Second Minimum Node In a Binary Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "second-minimum-node-in-a-binary-tree"
    },
    {
        "name": "Bulb Switcher II",
        "topic": "Math, Greedy, Brainteaser",
        "difficulty": "Medium",
        "link_id": "bulb-switcher-ii"
    },
    {
        "name": "Number of Longest Increasing Subsequence",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "number-of-longest-increasing-subsequence"
    },
    {
        "name": "Longest Continuous Increasing Subsequence",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "longest-continuous-increasing-subsequence"
    },
    {
        "name": "Cut Off Trees for Golf Event",
        "topic": "Breadth-first Search, Heap, Sort",
        "difficulty": "Hard",
        "link_id": "cut-off-trees-for-golf-event"
    },
    {
        "name": "Implement Magic Dictionary",
        "topic": "Hash Table, Trie, Design",
        "difficulty": "Medium",
        "link_id": "implement-magic-dictionary"
    },
    {
        "name": "Map Sum Pairs",
        "topic": "Trie",
        "difficulty": "Medium",
        "link_id": "map-sum-pairs"
    },
    {
        "name": "Valid Parenthesis String",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "valid-parenthesis-string"
    },
    {
        "name": "24 Game",
        "topic": "Depth-first Search, Breadth-first Search, Math",
        "difficulty": "Hard",
        "link_id": "24-game"
    },
    {
        "name": "Valid Palindrome II",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "valid-palindrome-ii"
    },
    {
        "name": "Next Closest Time",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "next-closest-time"
    },
    {
        "name": "Baseball Game",
        "topic": "Stack",
        "difficulty": "Easy",
        "link_id": "baseball-game"
    },
    {
        "name": "K Empty Slots",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "k-empty-slots"
    },
    {
        "name": "Redundant Connection",
        "topic": "Depth-first Search, Union Find, Graph",
        "difficulty": "Medium",
        "link_id": "redundant-connection"
    },
    {
        "name": "Redundant Connection II",
        "topic": "Depth-first Search, Union Find, Graph",
        "difficulty": "Hard",
        "link_id": "redundant-connection-ii"
    },
    {
        "name": "Repeated String Match",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "repeated-string-match"
    },
    {
        "name": "Longest Univalue Path",
        "topic": "Tree, Depth-first Search, Recursion",
        "difficulty": "Easy",
        "link_id": "longest-univalue-path"
    },
    {
        "name": "Knight Probability in Chessboard",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "knight-probability-in-chessboard"
    },
    {
        "name": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "maximum-sum-of-3-non-overlapping-subarrays"
    },
    {
        "name": "Employee Importance",
        "topic": "Depth-first Search, Breadth-first Search, Hash Table",
        "difficulty": "Easy",
        "link_id": "employee-importance"
    },
    {
        "name": "Stickers to Spell Word",
        "topic": "Dynamic Programming, Depth-first Search",
        "difficulty": "Hard",
        "link_id": "stickers-to-spell-word"
    },
    {
        "name": "Top K Frequent Words",
        "topic": "Hash Table, Heap, Trie",
        "difficulty": "Medium",
        "link_id": "top-k-frequent-words"
    },
    {
        "name": "Binary Number with Alternating Bits",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "binary-number-with-alternating-bits"
    },
    {
        "name": "Number of Distinct Islands",
        "topic": "Depth-first Search, Breadth-first Search",
        "difficulty": "Medium",
        "link_id": "number-of-distinct-islands"
    },
    {
        "name": "Max Area of Island",
        "topic": "Array, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "max-area-of-island"
    },
    {
        "name": "Count Binary Substrings",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "count-binary-substrings"
    },
    {
        "name": "Degree of an Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "degree-of-an-array"
    },
    {
        "name": "Partition to K Equal Sum Subsets",
        "topic": "Dynamic Programming, Backtracking",
        "difficulty": "Medium",
        "link_id": "partition-to-k-equal-sum-subsets"
    },
    {
        "name": "Falling Squares",
        "topic": "Segment Tree, Binary Indexed Tree, Line Sweep",
        "difficulty": "Hard",
        "link_id": "falling-squares"
    },
    {
        "name": "Search in a Binary Search Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "search-in-a-binary-search-tree"
    },
    {
        "name": "Insert into a Binary Search Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "insert-into-a-binary-search-tree"
    },
    {
        "name": "Search in a Sorted Array of Unknown Size",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "search-in-a-sorted-array-of-unknown-size"
    },
    {
        "name": "Kth Largest Element in a Stream",
        "topic": "Heap, Design",
        "difficulty": "Easy",
        "link_id": "kth-largest-element-in-a-stream"
    },
    {
        "name": "Binary Search",
        "topic": "Binary Search",
        "difficulty": "Easy",
        "link_id": "binary-search"
    },
    {
        "name": "Design HashSet",
        "topic": "Design, Hash Table",
        "difficulty": "Easy",
        "link_id": "design-hashset"
    },
    {
        "name": "Design HashMap",
        "topic": "Design, Hash Table",
        "difficulty": "Easy",
        "link_id": "design-hashmap"
    },
    {
        "name": "Design Linked List",
        "topic": "Design, Linked List",
        "difficulty": "Medium",
        "link_id": "design-linked-list"
    },
    {
        "name": "Insert into a Cyclic Sorted List",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "insert-into-a-cyclic-sorted-list"
    },
    {
        "name": "To Lower Case",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "to-lower-case"
    },
    {
        "name": "Random Pick with Blacklist",
        "topic": "Random",
        "difficulty": "Hard",
        "link_id": "random-pick-with-blacklist"
    },
    {
        "name": "Number of Distinct Islands II",
        "topic": "Breadth-first Search, Union Find",
        "difficulty": "Hard",
        "link_id": "number-of-distinct-islands-ii"
    },
    {
        "name": "Minimum ASCII Delete Sum for Two Strings",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-ascii-delete-sum-for-two-strings"
    },
    {
        "name": "Subarray Product Less Than K",
        "topic": "Array, Two Pointers, Binary Search",
        "difficulty": "Medium",
        "link_id": "subarray-product-less-than-k"
    },
    {
        "name": "Best Time to Buy and Sell Stock with Transaction Fee",
        "topic": "Array, Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "best-time-to-buy-and-sell-stock-with-transaction-fee"
    },
    {
        "name": "Range Module",
        "topic": "Segment Tree, Binary Search, Ordered Map",
        "difficulty": "Hard",
        "link_id": "range-module"
    },
    {
        "name": "Max Stack",
        "topic": "Design",
        "difficulty": "Easy",
        "link_id": "max-stack"
    },
    {
        "name": "1-bit and 2-bit Characters",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "1-bit-and-2-bit-characters"
    },
    {
        "name": "Maximum Length of Repeated Subarray",
        "topic": "Array, Hash Table, Binary Search, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-length-of-repeated-subarray"
    },
    {
        "name": "Find K-th Smallest Pair Distance",
        "topic": "Array, Binary Search, Heap",
        "difficulty": "Hard",
        "link_id": "find-k-th-smallest-pair-distance"
    },
    {
        "name": "Longest Word in Dictionary",
        "topic": "Trie",
        "difficulty": "Easy",
        "link_id": "longest-word-in-dictionary"
    },
    {
        "name": "Accounts Merge",
        "topic": "Depth-first Search, Union Find",
        "difficulty": "Medium",
        "link_id": "accounts-merge"
    },
    {
        "name": "Remove Comments",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "remove-comments"
    },
    {
        "name": "Candy Crush",
        "topic": "Two Pointers",
        "difficulty": "Medium",
        "link_id": "candy-crush"
    },
    {
        "name": "Find Pivot Index",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-pivot-index"
    },
    {
        "name": "Split Linked List in Parts",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "split-linked-list-in-parts"
    },
    {
        "name": "Number of Atoms",
        "topic": "String, Stack",
        "difficulty": "Hard",
        "link_id": "number-of-atoms"
    },
    {
        "name": "Minimum Window Subsequence",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "minimum-window-subsequence"
    },
    {
        "name": "My Calendar I",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "my-calendar-i"
    },
    {
        "name": "Count Different Palindromic Subsequences",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "count-different-palindromic-subsequences"
    },
    {
        "name": "My Calendar II",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "my-calendar-ii"
    },
    {
        "name": "My Calendar III",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "my-calendar-iii"
    },
    {
        "name": "Flood Fill",
        "topic": "Depth-first Search",
        "difficulty": "Easy",
        "link_id": "flood-fill"
    },
    {
        "name": "Sentence Similarity",
        "topic": "Hash Table, Two Pointers, String",
        "difficulty": "Easy",
        "link_id": "sentence-similarity"
    },
    {
        "name": "Asteroid Collision",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "asteroid-collision"
    },
    {
        "name": "Parse Lisp Expression",
        "topic": "String, Stack",
        "difficulty": "Hard",
        "link_id": "parse-lisp-expression"
    },
    {
        "name": "Sentence Similarity II",
        "topic": "Depth-first Search, Breadth-first Search, Union Find",
        "difficulty": "Medium",
        "link_id": "sentence-similarity-ii"
    },
    {
        "name": "Monotone Increasing Digits",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "monotone-increasing-digits"
    },
    {
        "name": "Daily Temperatures",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "daily-temperatures"
    },
    {
        "name": "Delete and Earn",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "delete-and-earn"
    },
    {
        "name": "Cherry Pickup",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "cherry-pickup"
    },
    {
        "name": "Closest Leaf in a Binary Tree",
        "topic": "Tree, Graph",
        "difficulty": "Medium",
        "link_id": "closest-leaf-in-a-binary-tree"
    },
    {
        "name": "Network Delay Time",
        "topic": "Heap, Depth-first Search, Breadth-first Search, Graph",
        "difficulty": "Medium",
        "link_id": "network-delay-time"
    },
    {
        "name": "Find Smallest Letter Greater Than Target",
        "topic": "Binary Search",
        "difficulty": "Easy",
        "link_id": "find-smallest-letter-greater-than-target"
    },
    {
        "name": "Prefix and Suffix Search",
        "topic": "Trie, Design",
        "difficulty": "Hard",
        "link_id": "prefix-and-suffix-search"
    },
    {
        "name": "Min Cost Climbing Stairs",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "min-cost-climbing-stairs"
    },
    {
        "name": "Largest Number At Least Twice of Others",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "largest-number-at-least-twice-of-others"
    },
    {
        "name": "Shortest Completing Word",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "shortest-completing-word"
    },
    {
        "name": "Contain Virus",
        "topic": "Depth-first Search, Union Find",
        "difficulty": "Hard",
        "link_id": "contain-virus"
    },
    {
        "name": "Number Of Corner Rectangles",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "number-of-corner-rectangles"
    },
    {
        "name": "IP to CIDR",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "ip-to-cidr"
    },
    {
        "name": "Open the Lock",
        "topic": "Breadth-first Search",
        "difficulty": "Medium",
        "link_id": "open-the-lock"
    },
    {
        "name": "Cracking the Safe",
        "topic": "Depth-first Search",
        "difficulty": "Hard",
        "link_id": "cracking-the-safe"
    },
    {
        "name": "Reach a Number",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "reach-a-number"
    },
    {
        "name": "Pour Water",
        "topic": "Simulation",
        "difficulty": "Medium",
        "link_id": "pour-water"
    },
    {
        "name": "Pyramid Transition Matrix",
        "topic": "Backtracking",
        "difficulty": "Medium",
        "link_id": "pyramid-transition-matrix"
    },
    {
        "name": "Set Intersection Size At Least Two",
        "topic": "Greedy",
        "difficulty": "Hard",
        "link_id": "set-intersection-size-at-least-two"
    },
    {
        "name": "Bold Words in String",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "bold-words-in-string"
    },
    {
        "name": "Employee Free Time",
        "topic": "Heap, Greedy, Line Sweep",
        "difficulty": "Hard",
        "link_id": "employee-free-time"
    },
    {
        "name": "Find Anagram Mappings",
        "topic": "Array, Hash Table",
        "difficulty": "Easy",
        "link_id": "find-anagram-mappings"
    },
    {
        "name": "Special Binary String",
        "topic": "String, Recursion",
        "difficulty": "Hard",
        "link_id": "special-binary-string"
    },
    {
        "name": "Prime Number of Set Bits in Binary Representation",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "prime-number-of-set-bits-in-binary-representation"
    },
    {
        "name": "Partition Labels",
        "topic": "Two Pointers, Greedy",
        "difficulty": "Medium",
        "link_id": "partition-labels"
    },
    {
        "name": "Largest Plus Sign",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "largest-plus-sign"
    },
    {
        "name": "Couples Holding Hands",
        "topic": "Greedy, Union Find, Graph",
        "difficulty": "Hard",
        "link_id": "couples-holding-hands"
    },
    {
        "name": "Toeplitz Matrix",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "toeplitz-matrix"
    },
    {
        "name": "Reorganize String",
        "topic": "String, Heap, Greedy, Sort",
        "difficulty": "Medium",
        "link_id": "reorganize-string"
    },
    {
        "name": "Max Chunks To Make Sorted II",
        "topic": "Array, Greedy",
        "difficulty": "Hard",
        "link_id": "max-chunks-to-make-sorted-ii"
    },
    {
        "name": "Max Chunks To Make Sorted",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "max-chunks-to-make-sorted"
    },
    {
        "name": "Basic Calculator IV",
        "topic": "String, Stack, Parsing",
        "difficulty": "Hard",
        "link_id": "basic-calculator-iv"
    },
    {
        "name": "Jewels and Stones",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "jewels-and-stones"
    },
    {
        "name": "Basic Calculator III",
        "topic": "String, Stack",
        "difficulty": "Hard",
        "link_id": "basic-calculator-iii"
    },
    {
        "name": "Sliding Puzzle",
        "topic": "Breadth-first Search",
        "difficulty": "Hard",
        "link_id": "sliding-puzzle"
    },
    {
        "name": "Minimize Max Distance to Gas Station",
        "topic": "Binary Search, Heap",
        "difficulty": "Hard",
        "link_id": "minimize-max-distance-to-gas-station"
    },
    {
        "name": "Global and Local Inversions",
        "topic": "Array, Math",
        "difficulty": "Medium",
        "link_id": "global-and-local-inversions"
    },
    {
        "name": "Split BST",
        "topic": "Tree, Binary Search",
        "difficulty": "Medium",
        "link_id": "split-bst"
    },
    {
        "name": "Swap Adjacent in LR String",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "swap-adjacent-in-lr-string"
    },
    {
        "name": "Swim in Rising Water",
        "topic": "Heap, Depth-first Search, Breadth-first Search, Union Find",
        "difficulty": "Hard",
        "link_id": "swim-in-rising-water"
    },
    {
        "name": "K-th Symbol in Grammar",
        "topic": "Recursion",
        "difficulty": "Medium",
        "link_id": "k-th-symbol-in-grammar"
    },
    {
        "name": "Reaching Points",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "reaching-points"
    },
    {
        "name": "Rabbits in Forest",
        "topic": "Hash Table, Math",
        "difficulty": "Medium",
        "link_id": "rabbits-in-forest"
    },
    {
        "name": "Transform to Chessboard",
        "topic": "Array, Math",
        "difficulty": "Hard",
        "link_id": "transform-to-chessboard"
    },
    {
        "name": "Minimum Distance Between BST Nodes",
        "topic": "Tree, Depth-first Search",
        "difficulty": "Easy",
        "link_id": "minimum-distance-between-bst-nodes"
    },
    {
        "name": "Letter Case Permutation",
        "topic": "Backtracking, Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "letter-case-permutation"
    },
    {
        "name": "Is Graph Bipartite?",
        "topic": "Depth-first Search, Breadth-first Search, Graph",
        "difficulty": "Medium",
        "link_id": "is-graph-bipartite"
    },
    {
        "name": "K-th Smallest Prime Fraction",
        "topic": "Heap, Binary Search",
        "difficulty": "Hard",
        "link_id": "k-th-smallest-prime-fraction"
    },
    {
        "name": "Cheapest Flights Within K Stops",
        "topic": "Depth-first Search, Breadth-first Search, Graph",
        "difficulty": "Medium",
        "link_id": "cheapest-flights-within-k-stops"
    },
    {
        "name": "Rotated Digits",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "rotated-digits"
    },
    {
        "name": "Escape The Ghosts",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "escape-the-ghosts"
    },
    {
        "name": "Domino and Tromino Tiling",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "domino-and-tromino-tiling"
    },
    {
        "name": "Custom Sort String",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "custom-sort-string"
    },
    {
        "name": "Number of Matching Subsequences",
        "topic": "Array, Hash Table, String",
        "difficulty": "Medium",
        "link_id": "number-of-matching-subsequences"
    },
    {
        "name": "Preimage Size of Factorial Zeroes Function",
        "topic": "Binary Search",
        "difficulty": "Hard",
        "link_id": "preimage-size-of-factorial-zeroes-function"
    },
    {
        "name": "Valid Tic-Tac-Toe State",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "valid-tic-tac-toe-state"
    },
    {
        "name": "Number of Subarrays with Bounded Maximum",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "number-of-subarrays-with-bounded-maximum"
    },
    {
        "name": "Rotate String",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "rotate-string"
    },
    {
        "name": "All Paths From Source to Target",
        "topic": "Depth-first Search",
        "difficulty": "Medium",
        "link_id": "all-paths-from-source-to-target"
    },
    {
        "name": "Smallest Rotation with Highest Score",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "smallest-rotation-with-highest-score"
    },
    {
        "name": "Champagne Tower",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "champagne-tower"
    },
    {
        "name": "Similar RGB Color",
        "topic": "String, Math",
        "difficulty": "Easy",
        "link_id": "similar-rgb-color"
    },
    {
        "name": "Path Sum IV",
        "topic": "Tree, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "path-sum-iv"
    },
    {
        "name": "Minimum ASCII Delete Sum for Two Strings",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-ascii-delete-sum-for-two-strings"
    },
    {
        "name": "Subarray Product Less Than K",
        "topic": "Array, Two Pointers, Binary Search",
        "difficulty": "Medium",
        "link_id": "subarray-product-less-than-k"
    },
    {
        "name": "Best Time to Buy and Sell Stock with Transaction Fee",
        "topic": "Array, Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "best-time-to-buy-and-sell-stock-with-transaction-fee"
    },
    {
        "name": "Range Module",
        "topic": "Segment Tree, Binary Search, Ordered Map",
        "difficulty": "Hard",
        "link_id": "range-module"
    },
    {
        "name": "Max Stack",
        "topic": "Design",
        "difficulty": "Easy",
        "link_id": "max-stack"
    },
    {
        "name": "1-bit and 2-bit Characters",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "1-bit-and-2-bit-characters"
    },
    {
        "name": "Maximum Length of Repeated Subarray",
        "topic": "Array, Hash Table, Binary Search, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-length-of-repeated-subarray"
    },
    {
        "name": "Find K-th Smallest Pair Distance",
        "topic": "Array, Binary Search, Heap",
        "difficulty": "Hard",
        "link_id": "find-k-th-smallest-pair-distance"
    },
    {
        "name": "Longest Word in Dictionary",
        "topic": "Trie",
        "difficulty": "Easy",
        "link_id": "longest-word-in-dictionary"
    },
    {
        "name": "Accounts Merge",
        "topic": "Depth-first Search, Union Find",
        "difficulty": "Medium",
        "link_id": "accounts-merge"
    },
    {
        "name": "Remove Comments",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "remove-comments"
    },
    {
        "name": "Candy Crush",
        "topic": "Two Pointers",
        "difficulty": "Medium",
        "link_id": "candy-crush"
    },
    {
        "name": "Find Pivot Index",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-pivot-index"
    },
    {
        "name": "Split Linked List in Parts",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "split-linked-list-in-parts"
    },
    {
        "name": "Number of Atoms",
        "topic": "String, Stack",
        "difficulty": "Hard",
        "link_id": "number-of-atoms"
    },
    {
        "name": "Minimum Window Subsequence",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "minimum-window-subsequence"
    },
    {
        "name": "My Calendar I",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "my-calendar-i"
    },
    {
        "name": "Count Different Palindromic Subsequences",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "count-different-palindromic-subsequences"
    },
    {
        "name": "My Calendar II",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "my-calendar-ii"
    },
    {
        "name": "My Calendar III",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "my-calendar-iii"
    },
    {
        "name": "Flood Fill",
        "topic": "Depth-first Search",
        "difficulty": "Easy",
        "link_id": "flood-fill"
    },
    {
        "name": "Sentence Similarity",
        "topic": "Hash Table, Two Pointers, String",
        "difficulty": "Easy",
        "link_id": "sentence-similarity"
    },
    {
        "name": "Asteroid Collision",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "asteroid-collision"
    },
    {
        "name": "Parse Lisp Expression",
        "topic": "String, Stack",
        "difficulty": "Hard",
        "link_id": "parse-lisp-expression"
    },
    {
        "name": "Sentence Similarity II",
        "topic": "Depth-first Search, Breadth-first Search, Union Find",
        "difficulty": "Medium",
        "link_id": "sentence-similarity-ii"
    },
    {
        "name": "Monotone Increasing Digits",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "monotone-increasing-digits"
    },
    {
        "name": "Daily Temperatures",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "daily-temperatures"
    },
    {
        "name": "Delete and Earn",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "delete-and-earn"
    },
    {
        "name": "Cherry Pickup",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "cherry-pickup"
    },
    {
        "name": "Closest Leaf in a Binary Tree",
        "topic": "Tree, Graph",
        "difficulty": "Medium",
        "link_id": "closest-leaf-in-a-binary-tree"
    },
    {
        "name": "Network Delay Time",
        "topic": "Heap, Depth-first Search, Breadth-first Search, Graph",
        "difficulty": "Medium",
        "link_id": "network-delay-time"
    },
    {
        "name": "Find Smallest Letter Greater Than Target",
        "topic": "Binary Search",
        "difficulty": "Easy",
        "link_id": "find-smallest-letter-greater-than-target"
    },
    {
        "name": "Prefix and Suffix Search",
        "topic": "Trie, Design",
        "difficulty": "Hard",
        "link_id": "prefix-and-suffix-search"
    },
    {
        "name": "Min Cost Climbing Stairs",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "min-cost-climbing-stairs"
    },
    {
        "name": "Largest Number At Least Twice of Others",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "largest-number-at-least-twice-of-others"
    },
    {
        "name": "Shortest Completing Word",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "shortest-completing-word"
    },
    {
        "name": "Minimum Swaps To Make Sequences Increasing",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-swaps-to-make-sequences-increasing"
    },
    {
        "name": "Find Eventual Safe States",
        "topic": "Graph",
        "difficulty": "Medium",
        "link_id": "find-eventual-safe-states"
    },
    {
        "name": "Unique Morse Code Words",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "unique-morse-code-words"
    },
    {
        "name": "Number of Lines To Write String",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "number-of-lines-to-write-string"
    },
    {
        "name": "Max Increase to Keep City Skyline",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "max-increase-to-keep-city-skyline"
    },
    {
        "name": "Soup Servings",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "soup-servings"
    },
    {
        "name": "Expressive Words",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "expressive-words"
    },
    {
        "name": "Subdomain Visit Count",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "subdomain-visit-count"
    },
    {
        "name": "Largest Triangle Area",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "largest-triangle-area"
    },
    {
        "name": "Binary Tree Pruning",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "binary-tree-pruning"
    },
    {
        "name": "Bus Routes",
        "topic": "Breadth-First Search, Array",
        "difficulty": "Hard",
        "link_id": "bus-routes"
    },
    {
        "name": "Ambiguous Coordinates",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "ambiguous-coordinates"
    },
    {
        "name": "Linked List Components",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "linked-list-components"
    },
    {
        "name": "Most Common Word",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "most-common-word"
    },
    {
        "name": "Short Encoding of Words",
        "topic": "String, Trie",
        "difficulty": "Medium",
        "link_id": "short-encoding-of-words"
    },
    {
        "name": "Shortest Distance to a Character",
        "topic": "Array, Two Pointers",
        "difficulty": "Easy",
        "link_id": "shortest-distance-to-a-character"
    },
    {
        "name": "Card Flipping Game",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "card-flipping-game"
    },
    {
        "name": "Binary Trees With Factors",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "binary-trees-with-factors"
    },
    {
        "name": "Goat Latin",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "goat-latin"
    },
    {
        "name": "Most Profit Assigning Work",
        "topic": "Two Pointers, Sort",
        "difficulty": "Medium",
        "link_id": "most-profit-assigning-work"
    },
    {
        "name": "Making A Large Island",
        "topic": "Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Hard",
        "link_id": "making-a-large-island"
    },
    {
        "name": "Unique Letter String",
        "topic": "Two Pointers",
        "difficulty": "Hard",
        "link_id": "unique-letter-string"
    },
    {
        "name": "Consecutive Numbers Sum",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "consecutive-numbers-sum"
    },
    {
        "name": "Positions of Large Groups",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "positions-of-large-groups"
    },
    {
        "name": "Masking Personal Information",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "masking-personal-information"
    },
    {
        "name": "Flipping an Image",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "flipping-an-image"
    },
    {
        "name": "Find And Replace in String",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "find-and-replace-in-string"
    },
    {
        "name": "Sum of Distances in Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "sum-of-distances-in-tree"
    },
    {
        "name": "Image Overlap",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "image-overlap"
    },
    {
        "name": "Rectangle Overlap",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "rectangle-overlap"
    },
    {
        "name": "New 21 Game",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "new-21-game"
    },
    {
        "name": "Push Dominoes",
        "topic": "Two Pointers",
        "difficulty": "Medium",
        "link_id": "push-dominoes"
    },
    {
        "name": "Similar String Groups",
        "topic": "Depth-First Search, Union Find",
        "difficulty": "Hard",
        "link_id": "similar-string-groups"
    },
    {
        "name": "Magic Squares In Grid",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "magic-squares-in-grid"
    },
    {
        "name": "Keys and Rooms",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "keys-and-rooms"
    },
    {
        "name": "Split Array into Fibonacci Sequence",
        "topic": "Backtracking, Greedy",
        "difficulty": "Medium",
        "link_id": "split-array-into-fibonacci-sequence"
    },
    {
        "name": "Guess the Word",
        "topic": "Minimax",
        "difficulty": "Hard",
        "link_id": "guess-the-word"
    },
    {
        "name": "Backspace String Compare",
        "topic": "Two Pointers, Stack",
        "difficulty": "Easy",
        "link_id": "backspace-string-compare"
    },
    {
        "name": "Longest Mountain in Array",
        "topic": "Two Pointers",
        "difficulty": "Medium",
        "link_id": "longest-mountain-in-array"
    },
    {
        "name": "Hand of Straights",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "hand-of-straights"
    },
    {
        "name": "Shortest Path Visiting All Nodes",
        "topic": "Dynamic Programming, Bit Manipulation",
        "difficulty": "Hard",
        "link_id": "shortest-path-visiting-all-nodes"
    },
    {
        "name": "Shifting Letters",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "shifting-letters"
    },
    {
        "name": "Maximize Distance to Closest Person",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "maximize-distance-to-closest-person"
    },
    {
        "name": "Rectangle Area II",
        "topic": "Line Sweep, Segment Tree",
        "difficulty": "Hard",
        "link_id": "rectangle-area-ii"
    },
    {
        "name": "Loud and Rich",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "loud-and-rich"
    },
    {
        "name": "Peak Index in a Mountain Array",
        "topic": "Binary Search",
        "difficulty": "Easy",
        "link_id": "peak-index-in-a-mountain-array"
    },
    {
        "name": "Car Fleet",
        "topic": "Sort",
        "difficulty": "Medium",
        "link_id": "car-fleet"
    },
    {
        "name": "K-Similar Strings",
        "topic": "Breadth-First Search, Graph",
        "difficulty": "Hard",
        "link_id": "k-similar-strings"
    },
    {
        "name": "Exam Room",
        "topic": "Ordered Set, Design",
        "difficulty": "Medium",
        "link_id": "exam-room"
    },
    {
        "name": "Score of Parentheses",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "score-of-parentheses"
    },
    {
        "name": "Minimum Cost to Hire K Workers",
        "topic": "Heap",
        "difficulty": "Hard",
        "link_id": "minimum-cost-to-hire-k-workers"
    },
    {
        "name": "Mirror Reflection",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "mirror-reflection"
    },
    {
        "name": "Buddy Strings",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "buddy-strings"
    },
    {
        "name": "Lemonade Change",
        "topic": "Greedy",
        "difficulty": "Easy",
        "link_id": "lemonade-change"
    },
    {
        "name": "Score After Flipping Matrix",
        "topic": "Greedy, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "score-after-flipping-matrix"
    },
    {
        "name": "Shortest Subarray with Sum at Least K",
        "topic": "Array, Binary Search",
        "difficulty": "Hard",
        "link_id": "shortest-subarray-with-sum-at-least-k"
    },
    {
        "name": "All Nodes Distance K in Binary Tree",
        "topic": "Tree, Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "all-nodes-distance-k-in-binary-tree"
    },
    {
        "name": "Shortest Path to Get All Keys",
        "topic": "Depth-First Search, Breadth-First Search",
        "difficulty": "Hard",
        "link_id": "shortest-path-to-get-all-keys"
    },
    {
        "name": "Smallest Subtree with all the Deepest Nodes",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "smallest-subtree-with-all-the-deepest-nodes"
    },
    {
        "name": "Prime Palindrome",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "prime-palindrome"
    },
    {
        "name": "Transpose Matrix",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "transpose-matrix"
    },
    {
        "name": "Binary Gap",
        "topic": "Math, Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "binary-gap"
    },
    {
        "name": "Reordered Power of 2",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "reordered-power-of-2"
    },
    {
        "name": "Advantage Shuffle",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "advantage-shuffle"
    },
    {
        "name": "Minimum Number of Refueling Stops",
        "topic": "Dynamic Programming, Heap, Greedy",
        "difficulty": "Hard",
        "link_id": "minimum-number-of-refueling-stops"
    },
    {
        "name": "Leaf-Similar Trees",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "leaf-similar-trees"
    },
    {
        "name": "Length of Longest Fibonacci Subsequence",
        "topic": "Array, Dynamic Programming, Hash Table",
        "difficulty": "Medium",
        "link_id": "length-of-longest-fibonacci-subsequence"
    },
    {
        "name": "Walking Robot Simulation",
        "topic": "Greedy",
        "difficulty": "Easy",
        "link_id": "walking-robot-simulation"
    },
    {
        "name": "Koko Eating Bananas",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "koko-eating-bananas"
    },
    {
        "name": "Middle of the Linked List",
        "topic": "Linked List",
        "difficulty": "Easy",
        "link_id": "middle-of-the-linked-list"
    },
    {
        "name": "Stone Game",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "stone-game"
    },
    {
        "name": "Nth Magical Number",
        "topic": "Math, Binary Search",
        "difficulty": "Hard",
        "link_id": "nth-magical-number"
    },
    {
        "name": "Profitable Schemes",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "profitable-schemes"
    },
    {
        "name": "Decoded String at Index",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "decoded-string-at-index"
    },
    {
        "name": "Boats to Save People",
        "topic": "Two Pointers, Greedy",
        "difficulty": "Medium",
        "link_id": "boats-to-save-people"
    },
    {
        "name": "Reachable Nodes In Subdivided Graph",
        "topic": "Heap, Graph, Dijkstra",
        "difficulty": "Hard",
        "link_id": "reachable-nodes-in-subdivided-graph"
    },
    {
        "name": "Projection Area of 3D Shapes",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "projection-area-of-3d-shapes"
    },
    {
        "name": "Uncommon Words from Two Sentences",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "uncommon-words-from-two-sentences"
    },
    {
        "name": "Spiral Matrix III",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "spiral-matrix-iii"
    },
    {
        "name": "Possible Bipartition",
        "topic": "Depth-First Search, Breadth-First Search, Graph",
        "difficulty": "Medium",
        "link_id": "possible-bipartition"
    },
    {
        "name": "Super Egg Drop",
        "topic": "Math, Binary Search, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "super-egg-drop"
    },
    {
        "name": "Fair Candy Swap",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "fair-candy-swap"
    },
    {
        "name": "Construct Binary Tree from Preorder and Postorder Traversal",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "construct-binary-tree-from-preorder-and-postorder-traversal"
    },
    {
        "name": "Find and Replace Pattern",
        "topic": "Hash Table",
        "difficulty": "Medium",
        "link_id": "find-and-replace-pattern"
    },
    {
        "name": "Sum of Subsequence Widths",
        "topic": "Array, Math",
        "difficulty": "Hard",
        "link_id": "sum-of-subsequence-widths"
    },
    {
        "name": "Surface Area of 3D Shapes",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "surface-area-of-3d-shapes"
    },
    {
        "name": "Groups of Special-Equivalent Strings",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "groups-of-special-equivalent-strings"
    },
    {
        "name": "All Possible Full Binary Trees",
        "topic": "Tree, Recursion",
        "difficulty": "Medium",
        "link_id": "all-possible-full-binary-trees"
    },
    {
        "name": "Maximum Frequency Stack",
        "topic": "Hash Table, Stack",
        "difficulty": "Hard",
        "link_id": "maximum-frequency-stack"
    },
    {
        "name": "Monotonic Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "monotonic-array"
    },
    {
        "name": "Increasing Order Search Tree",
        "topic": "Tree",
        "difficulty": "Easy",
        "link_id": "increasing-order-search-tree"
    },
    {
        "name": "Bitwise ORs of Subarrays",
        "topic": "Dynamic Programming, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "bitwise-ors-of-subarrays"
    },
    {
        "name": "Orderly Queue",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "orderly-queue"
    },
    {
        "name": "RLE Iterator",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "rle-iterator"
    },
    {
        "name": "Online Stock Span",
        "topic": "Stack",
        "difficulty": "Medium",
        "link_id": "online-stock-span"
    },
    {
        "name": "Numbers At Most N Given Digit Set",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "numbers-at-most-n-given-digit-set"
    },
    {
        "name": "Valid Permutations for DI Sequence",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "valid-permutations-for-di-sequence"
    },
    {
        "name": "Fruit Into Baskets",
        "topic": "Two Pointers",
        "difficulty": "Medium",
        "link_id": "fruit-into-baskets"
    },
    {
        "name": "Sort Array By Parity",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "sort-array-by-parity"
    },
    {
        "name": "Super Palindromes",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "super-palindromes"
    },
    {
        "name": "Sum of Subarray Minimums",
        "topic": "Array, Dynamic Programming, Stack",
        "difficulty": "Medium",
        "link_id": "sum-of-subarray-minimums"
    },
    {
        "name": "Smallest Range I",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "smallest-range-i"
    },
    {
        "name": "Snakes and Ladders",
        "topic": "Breadth-First Search, Graph",
        "difficulty": "Medium",
        "link_id": "snakes-and-ladders"
    },
    {
        "name": "Smallest Range II",
        "topic": "Math, Greedy",
        "difficulty": "Medium",
        "link_id": "smallest-range-ii"
    },
    {
        "name": "Online Election",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "online-election"
    },
    {
        "name": "Sort an Array",
        "topic": "Sort",
        "difficulty": "Medium",
        "link_id": "sort-an-array"
    },
    {
        "name": "Cat and Mouse",
        "topic": "Dynamic Programming, Minimax, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "cat-and-mouse"
    },
    {
        "name": "X of a Kind in a Deck of Cards",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "x-of-a-kind-in-a-deck-of-cards"
    },
    {
        "name": "Partition Array into Disjoint Intervals",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "partition-array-into-disjoint-intervals"
    },
    {
        "name": "Word Subsets",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "word-subsets"
    },
    {
        "name": "Reverse Only Letters",
        "topic": "Two Pointers, String",
        "difficulty": "Easy",
        "link_id": "reverse-only-letters"
    },
    {
        "name": "Maximum Sum Circular Subarray",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "maximum-sum-circular-subarray"
    },
    {
        "name": "Complete Binary Tree Inserter",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "complete-binary-tree-inserter"
    },
    {
        "name": "Number of Music Playlists",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-music-playlists"
    },
    {
        "name": "Minimum Add to Make Parentheses Valid",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "minimum-add-to-make-parentheses-valid"
    },
    {
        "name": "Sort Array By Parity II",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "sort-array-by-parity-ii"
    },
    {
        "name": "3Sum With Multiplicity",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "3sum-with-multiplicity"
    },
    {
        "name": "Minimize Malware Spread",
        "topic": "Depth-First Search, Union Find",
        "difficulty": "Hard",
        "link_id": "minimize-malware-spread"
    },
    {
        "name": "Long Pressed Name",
        "topic": "Two Pointers, String",
        "difficulty": "Easy",
        "link_id": "long-pressed-name"
    },
    {
        "name": "Flip String to Monotone Increasing",
        "topic": "String, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "flip-string-to-monotone-increasing"
    },
    {
        "name": "Three Equal Parts",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "three-equal-parts"
    },
    {
        "name": "Minimize Malware Spread II",
        "topic": "Depth-First Search, Union Find",
        "difficulty": "Hard",
        "link_id": "minimize-malware-spread-ii"
    },
    {
        "name": "Unique Email Addresses",
        "topic": "String, Hash Table",
        "difficulty": "Easy",
        "link_id": "unique-email-addresses"
    },
    {
        "name": "Binary Subarrays With Sum",
        "topic": "Array, Hash Table, Sliding Window",
        "difficulty": "Medium",
        "link_id": "binary-subarrays-with-sum"
    },
    {
        "name": "Minimum Falling Path Sum",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-falling-path-sum"
    },
    {
        "name": "Beautiful Array",
        "topic": "Divide and Conquer",
        "difficulty": "Medium",
        "link_id": "beautiful-array"
    },
    {
        "name": "Number of Recent Calls",
        "topic": "Queue",
        "difficulty": "Easy",
        "link_id": "number-of-recent-calls"
    },
    {
        "name": "Shortest Bridge",
        "topic": "Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "shortest-bridge"
    },
    {
        "name": "Knight Dialer",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "knight-dialer"
    },
    {
        "name": "Stamping The Sequence",
        "topic": "Greedy",
        "difficulty": "Hard",
        "link_id": "stamping-the-sequence"
    },
    {
        "name": "Reorder Data in Log Files",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reorder-data-in-log-files"
    },
    {
        "name": "Range Sum of BST",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "range-sum-of-bst"
    },
    {
        "name": "Minimum Area Rectangle",
        "topic": "Hash Table, Math",
        "difficulty": "Medium",
        "link_id": "minimum-area-rectangle"
    },
    {
        "name": "Distinct Subsequences II",
        "topic": "String, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "distinct-subsequences-ii"
    },
    {
        "name": "Valid Mountain Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "valid-mountain-array"
    },
    {
        "name": "DI String Match",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "di-string-match"
    },
    {
        "name": "Find the Shortest Superstring",
        "topic": "Dynamic Programming, Traveling Salesman Problem",
        "difficulty": "Hard",
        "link_id": "find-the-shortest-superstring"
    },
    {
        "name": "Delete Columns to Make Sorted",
        "topic": "Greedy",
        "difficulty": "Easy",
        "link_id": "delete-columns-to-make-sorted"
    },
    {
        "name": "Minimum Increment to Make Array Unique",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-increment-to-make-array-unique"
    },
    {
        "name": "Validate Stack Sequences",
        "topic": "Stack, Greedy",
        "difficulty": "Medium",
        "link_id": "validate-stack-sequences"
    },
    {
        "name": "Most Stones Removed with Same Row or Column",
        "topic": "Depth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "most-stones-removed-with-same-row-or-column"
    },
    {
        "name": "Number of Squareful Arrays",
        "topic": "Backtracking, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "number-of-squareful-arrays"
    },
    {
        "name": "Find the Town Judge",
        "topic": "Graph",
        "difficulty": "Easy",
        "link_id": "find-the-town-judge"
    },
    {
        "name": "Maximum Binary Tree II",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "maximum-binary-tree-ii"
    },
    {
        "name": "Available Captures for Rook",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "available-captures-for-rook"
    },
    {
        "name": "Minimum Cost to Merge Stones",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "minimum-cost-to-merge-stones"
    },
    {
        "name": "Grid Illumination",
        "topic": "Hash Table",
        "difficulty": "Hard",
        "link_id": "grid-illumination"
    },
    {
        "name": "Find Common Characters",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "find-common-characters"
    },
    {
        "name": "Check If Word Is Valid After Substitutions",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "check-if-word-is-valid-after-substitutions"
    },
    {
        "name": "Max Consecutive Ones III",
        "topic": "Array, Two Pointers, Sliding Window",
        "difficulty": "Medium",
        "link_id": "max-consecutive-ones-iii"
    },
    {
        "name": "Maximize Sum Of Array After K Negations",
        "topic": "Array, Greedy",
        "difficulty": "Easy",
        "link_id": "maximize-sum-of-array-after-k-negations"
    },
    {
        "name": "Clumsy Factorial",
        "topic": "Math, Stack",
        "difficulty": "Medium",
        "link_id": "clumsy-factorial"
    },
    {
        "name": "Minimum Domino Rotations For Equal Row",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-domino-rotations-for-equal-row"
    },
    {
        "name": "Construct Binary Search Tree from Preorder Traversal",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "construct-binary-search-tree-from-preorder-traversal"
    },
    {
        "name": "Complement of Base 10 Integer",
        "topic": "Bit Manipulation, Math",
        "difficulty": "Easy",
        "link_id": "complement-of-base-10-integer"
    },
    {
        "name": "Pairs of Songs With Total Durations Divisible by 60",
        "topic": "Array, Hash Table, Math",
        "difficulty": "Easy",
        "link_id": "pairs-of-songs-with-total-durations-divisible-by-60"
    },
    {
        "name": "Capacity To Ship Packages Within D Days",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "capacity-to-ship-packages-within-d-days"
    },
    {
        "name": "Numbers With Repeated Digits",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "numbers-with-repeated-digits"
    },
    {
        "name": "Partition Array Into Three Parts With Equal Sum",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "partition-array-into-three-parts-with-equal-sum"
    },
    {
        "name": "Best Sightseeing Pair",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "best-sightseeing-pair"
    },
    {
        "name": "Smallest Integer Divisible by K",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "smallest-integer-divisible-by-k"
    },
    {
        "name": "Binary String With Substrings Representing 1 To N",
        "topic": "Math, String",
        "difficulty": "Medium",
        "link_id": "binary-string-with-substrings-representing-1-to-n"
    },
    {
        "name": "Convert to Base -2",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "convert-to-base-2"
    },
    {
        "name": "Binary Prefix Divisible By 5",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "binary-prefix-divisible-by-5"
    },
    {
        "name": "Next Greater Node In Linked List",
        "topic": "Linked List, Stack",
        "difficulty": "Medium",
        "link_id": "next-greater-node-in-linked-list"
    },
    {
        "name": "Number of Enclaves",
        "topic": "Array, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "number-of-enclaves"
    },
    {
        "name": "Remove Outermost Parentheses",
        "topic": "String, Stack",
        "difficulty": "Easy",
        "link_id": "remove-outermost-parentheses"
    },
    {
        "name": "Sum of Root To Leaf Binary Numbers",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Easy",
        "link_id": "sum-of-root-to-leaf-binary-numbers"
    },
    {
        "name": "Camelcase Matching",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "camelcase-matching"
    },
    {
        "name": "Video Stitching",
        "topic": "Greedy, Dynamic Programming, Sort",
        "difficulty": "Medium",
        "link_id": "video-stitching"
    },
    {
        "name": "Divisor Game",
        "topic": "Math, Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "divisor-game"
    },
    {
        "name": "Maximum Difference Between Node and Ancestor",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "maximum-difference-between-node-and-ancestor"
    },
    {
        "name": "Longest Arithmetic Sequence",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-arithmetic-sequence"
    },
    {
        "name": "Recover a Tree From Preorder Traversal",
        "topic": "Tree",
        "difficulty": "Hard",
        "link_id": "recover-a-tree-from-preorder-traversal"
    },
    {
        "name": "Two City Scheduling",
        "topic": "Greedy",
        "difficulty": "Easy",
        "link_id": "two-city-scheduling"
    },
    {
        "name": "Matrix Cells in Distance Order",
        "topic": "Sort",
        "difficulty": "Easy",
        "link_id": "matrix-cells-in-distance-order"
    },
    {
        "name": "Maximum Sum of Two Non-Overlapping Subarrays",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-sum-of-two-non-overlapping-subarrays"
    },
    {
        "name": "Stream of Characters",
        "topic": "Trie",
        "difficulty": "Hard",
        "link_id": "stream-of-characters"
    },
    {
        "name": "Moving Stones Until Consecutive",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "moving-stones-until-consecutive"
    },
    {
        "name": "Coloring A Border",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "coloring-a-border"
    },
    {
        "name": "Uncrossed Lines",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "uncrossed-lines"
    },
    {
        "name": "Escape a Large Maze",
        "topic": "Depth-First Search",
        "difficulty": "Hard",
        "link_id": "escape-a-large-maze"
    },
    {
        "name": "Valid Boomerang",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "valid-boomerang"
    },
    {
        "name": "Binary Search Tree to Greater Sum Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "binary-search-tree-to-greater-sum-tree"
    },
    {
        "name": "Minimum Score Triangulation of Polygon",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-score-triangulation-of-polygon"
    },
    {
        "name": "Moving Stones Until Consecutive II",
        "topic": "Sliding Window",
        "difficulty": "Medium",
        "link_id": "moving-stones-until-consecutive-ii"
    },
    {
        "name": "Robot Bounded In Circle",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "robot-bounded-in-circle"
    },
    {
        "name": "Flower Planting With No Adjacent",
        "topic": "Graph",
        "difficulty": "Easy",
        "link_id": "flower-planting-with-no-adjacent"
    },
    {
        "name": "Partition Array for Maximum Sum",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "partition-array-for-maximum-sum"
    },
    {
        "name": "Longest Duplicate Substring",
        "topic": "String, Binary Search, Rolling Hash",
        "difficulty": "Hard",
        "link_id": "longest-duplicate-substring"
    },
    {
        "name": "Customers Who Bought All Products",
        "topic": "Hash Table, Two Pointers",
        "difficulty": "Medium",
        "link_id": "customers-who-bought-all-products"
    },
    {
        "name": "Last Stone Weight",
        "topic": "Heap, Greedy",
        "difficulty": "Easy",
        "link_id": "last-stone-weight"
    },
    {
        "name": "Remove All Adjacent Duplicates In String",
        "topic": "Stack",
        "difficulty": "Easy",
        "link_id": "remove-all-adjacent-duplicates-in-string"
    },
    {
        "name": "Longest String Chain",
        "topic": "Hash Table, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-string-chain"
    },
    {
        "name": "Last Stone Weight II",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "last-stone-weight-ii"
    },
    {
        "name": "Height Checker",
        "topic": "Array, Sort",
        "difficulty": "Easy",
        "link_id": "height-checker"
    },
    {
        "name": "Grumpy Bookstore Owner",
        "topic": "Array, Sliding Window",
        "difficulty": "Medium",
        "link_id": "grumpy-bookstore-owner"
    },
    {
        "name": "Previous Permutation With One Swap",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "previous-permutation-with-one-swap"
    },
    {
        "name": "Distant Barcodes",
        "topic": "Array, Greedy, Heap, Sort",
        "difficulty": "Medium",
        "link_id": "distant-barcodes"
    },
    {
        "name": "Shortest Way to Form String",
        "topic": "Greedy, Two Pointers",
        "difficulty": "Medium",
        "link_id": "shortest-way-to-form-string"
    },
    {
        "name": "Confusing Number",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "confusing-number"
    },
    {
        "name": "Campus Bikes",
        "topic": "Hash Table, Heap, Greedy",
        "difficulty": "Medium",
        "link_id": "campus-bikes"
    },
    {
        "name": "Minimize Rounding Error to Meet Target",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "minimize-rounding-error-to-meet-target"
    },
    {
        "name": "All Paths from Source Lead to Destination",
        "topic": "Depth-First Search, Breadth-First Search, Graph",
        "difficulty": "Medium",
        "link_id": "all-paths-from-source-lead-to-destination"
    },
    {
        "name": "Missing Element in Sorted Array",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "missing-element-in-sorted-array"
    },
    {
        "name": "Lexicographically Smallest Equivalent String",
        "topic": "Union Find",
        "difficulty": "Medium",
        "link_id": "lexicographically-smallest-equivalent-string"
    },
    {
        "name": "Longest Repeating Substring",
        "topic": "String, Binary Search",
        "difficulty": "Medium",
        "link_id": "longest-repeating-substring"
    },
    {
        "name": "Number of Valid Subarrays",
        "topic": "Array, Stack, Sliding Window",
        "difficulty": "Hard",
        "link_id": "number-of-valid-subarrays"
    },
    {
        "name": "Fixed Point",
        "topic": "Array, Binary Search",
        "difficulty": "Easy",
        "link_id": "fixed-point"
    },
    {
        "name": "Index Pairs of a String",
        "topic": "String, Trie",
        "difficulty": "Easy",
        "link_id": "index-pairs-of-a-string"
    },
    {
        "name": "Campus Bikes II",
        "topic": "Greedy, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "campus-bikes-ii"
    },
    {
        "name": "Digit Count in Range",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "digit-count-in-range"
    },
    {
        "name": "Product Sales Analysis I",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "product-sales-analysis-i"
    },
    {
        "name": "Product Sales Analysis II",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "product-sales-analysis-ii"
    },
    {
        "name": "Product Sales Analysis III",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "product-sales-analysis-iii"
    },
    {
        "name": "Greatest Common Divisor of Strings",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "greatest-common-divisor-of-strings"
    },
    {
        "name": "Flip Columns For Maximum Number of Equal Rows",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "flip-columns-for-maximum-number-of-equal-rows"
    },
    {
        "name": "Adding Two Negabinary Numbers",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "adding-two-negabinary-numbers"
    },
    {
        "name": "Number of Submatrices That Sum to Target",
        "topic": "Array, Hash Table",
        "difficulty": "Hard",
        "link_id": "number-of-submatrices-that-sum-to-target"
    },
    {
        "name": "Project Employees I",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "project-employees-i"
    },
    {
        "name": "Project Employees II",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "project-employees-ii"
    },
    {
        "name": "Project Employees III",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "project-employees-iii"
    },
    {
        "name": "Occurrences After Bigram",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "occurrences-after-bigram"
    },
    {
        "name": "Letter Tile Possibilities",
        "topic": "Backtracking",
        "difficulty": "Medium",
        "link_id": "letter-tile-possibilities"
    },
    {
        "name": "Insufficient Nodes in Root to Leaf Paths",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "insufficient-nodes-in-root-to-leaf-paths"
    },
    {
        "name": "Smallest Subsequence of Distinct Characters",
        "topic": "Stack, Greedy",
        "difficulty": "Medium",
        "link_id": "smallest-subsequence-of-distinct-characters"
    },
    {
        "name": "Sales Analysis I",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "sales-analysis-i"
    },
    {
        "name": "Sales Analysis II",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "sales-analysis-ii"
    },
    {
        "name": "Sales Analysis III",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "sales-analysis-iii"
    },
    {
        "name": "Sum of Digits in the Minimum Number",
        "topic": "Math, Greedy",
        "difficulty": "Easy",
        "link_id": "sum-of-digits-in-the-minimum-number"
    },
    {
        "name": "High Five",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "high-five"
    },
    {
        "name": "Brace Expansion",
        "topic": "String, Backtracking",
        "difficulty": "Medium",
        "link_id": "brace-expansion"
    },
    {
        "name": "Confusing Number II",
        "topic": "Math, Depth-First Search, Breadth-First Search",
        "difficulty": "Hard",
        "link_id": "confusing-number-ii"
    },
    {
        "name": "Duplicate Zeros",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "duplicate-zeros"
    },
    {
        "name": "Largest Values From Labels",
        "topic": "Greedy, Sort",
        "difficulty": "Medium",
        "link_id": "largest-values-from-labels"
    },
    {
        "name": "Shortest Path in Binary Matrix",
        "topic": "Array, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "shortest-path-in-binary-matrix"
    },
    {
        "name": "Shortest Common Supersequence",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "shortest-common-supersequence"
    },
    {
        "name": "Statistics from a Large Sample",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "statistics-from-a-large-sample"
    },
    {
        "name": "Car Pooling",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "car-pooling"
    },
    {
        "name": "Find in Mountain Array",
        "topic": "Array, Binary Search",
        "difficulty": "Hard",
        "link_id": "find-in-mountain-array"
    },
    {
        "name": "Brace Expansion II",
        "topic": "String, Backtracking",
        "difficulty": "Hard",
        "link_id": "brace-expansion-ii"
    },
    {
        "name": "Game Play Analysis V",
        "topic": "SQL",
        "difficulty": "Hard",
        "link_id": "game-play-analysis-v"
    },
    {
        "name": "Unpopular Books",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "unpopular-books"
    },
    {
        "name": "Two Sum Less Than K",
        "topic": "Array, Two Pointers, Binary Search",
        "difficulty": "Easy",
        "link_id": "two-sum-less-than-k"
    },
    {
        "name": "Find K-Length Substrings With No Repeated Characters",
        "topic": "Hash Table, String, Sliding Window",
        "difficulty": "Medium",
        "link_id": "find-k-length-substrings-with-no-repeated-characters"
    },
    {
        "name": "The Earliest Moment When Everyone Become Friends",
        "topic": "Union Find",
        "difficulty": "Medium",
        "link_id": "the-earliest-moment-when-everyone-become-friends"
    },
    {
        "name": "Path With Maximum Minimum Value",
        "topic": "Binary Search, Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "path-with-maximum-minimum-value"
    },
    {
        "name": "Distribute Candies to People",
        "topic": "Math, Binary Search",
        "difficulty": "Easy",
        "link_id": "distribute-candies-to-people"
    },
    {
        "name": "Path In Zigzag Labelled Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "path-in-zigzag-labelled-binary-tree"
    },
    {
        "name": "Filling Bookcase Shelves",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "filling-bookcase-shelves"
    },
    {
        "name": "Parsing A Boolean Expression",
        "topic": "String, Stack, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "parsing-a-boolean-expression"
    },
    {
        "name": "New Users Daily Count",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "new-users-daily-count"
    },
    {
        "name": "Corporate Flight Bookings",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "corporate-flight-bookings"
    },
    {
        "name": "Delete Nodes And Return Forest",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "delete-nodes-and-return-forest"
    },
    {
        "name": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "topic": "String, Greedy",
        "difficulty": "Medium",
        "link_id": "maximum-nesting-depth-of-two-valid-parentheses-strings"
    },
    {
        "name": "Reported Posts",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "reported-posts"
    },
    {
        "name": "Print in Order",
        "topic": "Concurrency",
        "difficulty": "Easy",
        "link_id": "print-in-order"
    },
    {
        "name": "Print FooBar Alternately",
        "topic": "Concurrency",
        "difficulty": "Medium",
        "link_id": "print-foobar-alternately"
    },
    {
        "name": "Print Zero Even Odd",
        "topic": "Concurrency",
        "difficulty": "Medium",
        "link_id": "print-zero-even-odd"
    },
    {
        "name": "Building H2O",
        "topic": "Concurrency",
        "difficulty": "Medium",
        "link_id": "building-h2o"
    },
    {
        "name": "Number of Days in a Month",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "number-of-days-in-a-month"
    },
    {
        "name": "Remove Vowels from a String",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "remove-vowels-from-a-string"
    },
    {
        "name": "Maximum Average Subtree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "maximum-average-subtree"
    },
    {
        "name": "Divide Array Into Increasing Sequences",
        "topic": "Greedy",
        "difficulty": "Hard",
        "link_id": "divide-array-into-increasing-sequences"
    },
    {
        "name": "Relative Sort Array",
        "topic": "Array, Sorting, Hash Table",
        "difficulty": "Easy",
        "link_id": "relative-sort-array"
    },
    {
        "name": "Lowest Common Ancestor of Deepest Leaves",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "lowest-common-ancestor-of-deepest-leaves"
    },
    {
        "name": "Longest Well-Performing Interval",
        "topic": "Hash Table",
        "difficulty": "Medium",
        "link_id": "longest-well-performing-interval"
    },
    {
        "name": "Smallest Sufficient Team",
        "topic": "Dynamic Programming, Bit Manipulation",
        "difficulty": "Hard",
        "link_id": "smallest-sufficient-team"
    },
    {
        "name": "Active Businesses",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "active-businesses"
    },
    {
        "name": "User Purchase Platform",
        "topic": "SQL",
        "difficulty": "Hard",
        "link_id": "user-purchase-platform"
    },
    {
        "name": "Number of Equivalent Domino Pairs",
        "topic": "Array, Hash Table",
        "difficulty": "Easy",
        "link_id": "number-of-equivalent-domino-pairs"
    },
    {
        "name": "Shortest Path with Alternating Colors",
        "topic": "Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "shortest-path-with-alternating-colors"
    },
    {
        "name": "Minimum Cost Tree From Leaf Values",
        "topic": "Dynamic Programming, Stack, Tree",
        "difficulty": "Medium",
        "link_id": "minimum-cost-tree-from-leaf-values"
    },
    {
        "name": "Maximum of Absolute Value Expression",
        "topic": "Array, Math",
        "difficulty": "Medium",
        "link_id": "maximum-of-absolute-value-expression"
    },
    {
        "name": "Reported Posts II",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "reported-posts-ii"
    },
    {
        "name": "Largest Unique Number",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "largest-unique-number"
    },
    {
        "name": "Armstrong Number",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "armstrong-number"
    },
    {
        "name": "Connecting Cities With Minimum Cost",
        "topic": "Graph, Union Find",
        "difficulty": "Medium",
        "link_id": "connecting-cities-with-minimum-cost"
    },
    {
        "name": "Parallel Courses",
        "topic": "Graph, Topological Sort",
        "difficulty": "Hard",
        "link_id": "parallel-courses"
    },
    {
        "name": "N-th Tribonacci Number",
        "topic": "Recursion, Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "n-th-tribonacci-number"
    },
    {
        "name": "Alphabet Board Path",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "alphabet-board-path"
    },
    {
        "name": "Largest 1-Bordered Square",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "largest-1-bordered-square"
    },
    {
        "name": "Stone Game II",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "stone-game-ii"
    },
    {
        "name": "User Activity for the Past 30 Days I",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "user-activity-for-the-past-30-days-i"
    },
    {
        "name": "User Activity for the Past 30 Days II",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "user-activity-for-the-past-30-days-ii"
    },
    {
        "name": "Longest Common Subsequence",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-common-subsequence"
    },
    {
        "name": "Decrease Elements To Make Array Zigzag",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "decrease-elements-to-make-array-zigzag"
    },
    {
        "name": "Binary Tree Coloring Game",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "binary-tree-coloring-game"
    },
    {
        "name": "Snapshot Array",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "snapshot-array"
    },
    {
        "name": "Longest Chunked Palindrome Decomposition",
        "topic": "Dynamic Programming, String",
        "difficulty": "Hard",
        "link_id": "longest-chunked-palindrome-decomposition"
    },
    {
        "name": "Article Views I",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "article-views-i"
    },
    {
        "name": "Article Views II",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "article-views-ii"
    },
    {
        "name": "Check If a Number Is Majority Element in a Sorted Array",
        "topic": "Array, Binary Search",
        "difficulty": "Easy",
        "link_id": "check-if-a-number-is-majority-element-in-a-sorted-array"
    },
    {
        "name": "Minimum Swaps to Group All 1's Together",
        "topic": "Array, Sliding Window",
        "difficulty": "Medium",
        "link_id": "minimum-swaps-to-group-all-1s-together"
    },
    {
        "name": "Analyze User Website Visit Pattern",
        "topic": "Hash Table",
        "difficulty": "Medium",
        "link_id": "analyze-user-website-visit-pattern"
    },
    {
        "name": "String Transforms Into Another String",
        "topic": "Greedy, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "string-transforms-into-another-string"
    },
    {
        "name": "Day of the Year",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "day-of-the-year"
    },
    {
        "name": "Number of Dice Rolls With Target Sum",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "number-of-dice-rolls-with-target-sum"
    },
    {
        "name": "Swap For Longest Repeated Character Substring",
        "topic": "Two Pointers, String",
        "difficulty": "Medium",
        "link_id": "swap-for-longest-repeated-character-substring"
    },
    {
        "name": "Online Majority Element In Subarray",
        "topic": "Array, Binary Search",
        "difficulty": "Hard",
        "link_id": "online-majority-element-in-subarray"
    },
    {
        "name": "Market Analysis I",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "market-analysis-i"
    },
    {
        "name": "Market Analysis II",
        "topic": "SQL",
        "difficulty": "Hard",
        "link_id": "market-analysis-ii"
    },
    {
        "name": "Find Words That Can Be Formed by Characters",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "find-words-that-can-be-formed-by-characters"
    },
    {
        "name": "Maximum Level Sum of a Binary Tree",
        "topic": "Tree, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "maximum-level-sum-of-a-binary-tree"
    },
    {
        "name": "As Far from Land as Possible",
        "topic": "Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "as-far-from-land-as-possible"
    },
    {
        "name": "Last Substring in Lexicographical Order",
        "topic": "String",
        "difficulty": "Hard",
        "link_id": "last-substring-in-lexicographical-order"
    },
    {
        "name": "Product Price at a Given Date",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "product-price-at-a-given-date"
    },
    {
        "name": "Single-Row Keyboard",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "single-row-keyboard"
    },
    {
        "name": "Design File System",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-file-system"
    },
    {
        "name": "Minimum Cost to Connect Sticks",
        "topic": "Greedy, Priority Queue",
        "difficulty": "Medium",
        "link_id": "minimum-cost-to-connect-sticks"
    },
    {
        "name": "Optimize Water Distribution in a Village",
        "topic": "Graph, Greedy, Union Find",
        "difficulty": "Hard",
        "link_id": "optimize-water-distribution-in-a-village"
    },
    {
        "name": "Invalid Transactions",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "invalid-transactions"
    },
    {
        "name": "Compare Strings by Frequency of the Smallest Character",
        "topic": "Array, String",
        "difficulty": "Easy",
        "link_id": "compare-strings-by-frequency-of-the-smallest-character"
    },
    {
        "name": "Remove Zero Sum Consecutive Nodes from Linked List",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "remove-zero-sum-consecutive-nodes-from-linked-list"
    },
    {
        "name": "Dinner Plate Stacks",
        "topic": "Stack, Design, Binary Search",
        "difficulty": "Hard",
        "link_id": "dinner-plate-stacks"
    },
    {
        "name": "Immediate Food Delivery I",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "immediate-food-delivery-i"
    },
    {
        "name": "Immediate Food Delivery II",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "immediate-food-delivery-ii"
    },
    {
        "name": "Prime Arrangements",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "prime-arrangements"
    },
    {
        "name": "Diet Plan Performance",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "diet-plan-performance"
    },
    {
        "name": "Can Make Palindrome from Substring",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "can-make-palindrome-from-substring"
    },
    {
        "name": "Number of Valid Words for Each Puzzle",
        "topic": "Bit Manipulation, Trie",
        "difficulty": "Hard",
        "link_id": "number-of-valid-words-for-each-puzzle"
    },
    {
        "name": "Reformat Department Table",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "reformat-department-table"
    },
    {
        "name": "Count Substrings with Only One Distinct Letter",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "count-substrings-with-only-one-distinct-letter"
    },
    {
        "name": "Before and After Puzzle",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "before-and-after-puzzle"
    },
    {
        "name": "Shortest Distance to Target Color",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "shortest-distance-to-target-color"
    },
    {
        "name": "Maximum Number of Ones",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "maximum-number-of-ones"
    },
    {
        "name": "Distance Between Bus Stops",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "distance-between-bus-stops"
    },
    {
        "name": "Day of the Week",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "day-of-the-week"
    },
    {
        "name": "Maximum Subarray Sum with One Deletion",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-subarray-sum-with-one-deletion"
    },
    {
        "name": "Design Bounded Blocking Queue",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-bounded-blocking-queue"
    },
    {
        "name": "Maximum Number of Balloons",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "maximum-number-of-balloons"
    },
    {
        "name": "Reverse Substrings Between Each Pair of Parentheses",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "reverse-substrings-between-each-pair-of-parentheses"
    },
    {
        "name": "K-Concatenation Maximum Sum",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "k-concatenation-maximum-sum"
    },
    {
        "name": "Critical Connections in a Network",
        "topic": "Graph, Depth-First Search, Tarjan's Algorithm",
        "difficulty": "Hard",
        "link_id": "critical-connections-in-a-network"
    },
    {
        "name": "Monthly Transactions I",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "monthly-transactions-i"
    },
    {
        "name": "Tournament Winners",
        "topic": "SQL",
        "difficulty": "Hard",
        "link_id": "tournament-winners"
    },
    {
        "name": "Fizz Buzz Multithreaded",
        "topic": "Concurrency",
        "difficulty": "Medium",
        "link_id": "fizz-buzz-multithreaded"
    },
    {
        "name": "How Many Apples Can You Put into the Basket",
        "topic": "Greedy",
        "difficulty": "Prime",
        "link_id": "how-many-apples-can-you-put-into-the-basket"
    },
    {
        "name": "Minimum Absolute Difference",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "minimum-absolute-difference"
    },
    {
        "name": "Ugly Number III",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "ugly-number-iii"
    },
    {
        "name": "Smallest String With Swaps",
        "topic": "String, Greedy, Union Find",
        "difficulty": "Medium",
        "link_id": "smallest-string-with-swaps"
    },
    {
        "name": "Sort Items by Groups Respecting Dependencies",
        "topic": "Graph, Topological Sort",
        "difficulty": "Hard",
        "link_id": "sort-items-by-groups-respecting-dependencies"
    },
    {
        "name": "Design Skiplist",
        "topic": "Design, Randomized, Linked List",
        "difficulty": "Hard",
        "link_id": "design-skiplist"
    },
    {
        "name": "Unique Number of Occurrences",
        "topic": "Hash Table",
        "difficulty": "Easy",
        "link_id": "unique-number-of-occurrences"
    },
    {
        "name": "Get Equal Substrings Within Budget",
        "topic": "Two Pointers, Sliding Window",
        "difficulty": "Medium",
        "link_id": "get-equal-substrings-within-budget"
    },
    {
        "name": "Remove All Adjacent Duplicates in String II",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "remove-all-adjacent-duplicates-in-string-ii"
    },
    {
        "name": "Play with Chips",
        "topic": "Array, Greedy",
        "difficulty": "Easy",
        "link_id": "play-with-chips"
    },
    {
        "name": "Longest Arithmetic Subsequence of Given Difference",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "longest-arithmetic-subsequence-of-given-difference"
    },
    {
        "name": "Path with Maximum Gold",
        "topic": "Depth-First Search",
        "difficulty": "Medium",
        "link_id": "path-with-maximum-gold"
    },
    {
        "name": "Minimum Moves to Reach Target with Rotations",
        "topic": "Breadth-First Search, Array",
        "difficulty": "Hard",
        "link_id": "minimum-moves-to-reach-target-with-rotations"
    },
    {
        "name": "Split a String in Balanced Strings",
        "topic": "Greedy, String",
        "difficulty": "Easy",
        "link_id": "split-a-string-in-balanced-strings"
    },
    {
        "name": "Queens That Can Attack the King",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "queens-that-can-attack-the-king"
    },
    {
        "name": "Dice Roll Simulation",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "dice-roll-simulation"
    },
    {
        "name": "Maximum Equal Frequency",
        "topic": "Array, Hash Table",
        "difficulty": "Hard",
        "link_id": "maximum-equal-frequency"
    },
    {
        "name": "Report Contiguous Dates",
        "topic": "String",
        "difficulty": "Hard",
        "link_id": "report-contiguous-dates"
    },
    {
        "name": "The Dining Philosophers",
        "topic": "Concurrency",
        "difficulty": "Medium",
        "link_id": "the-dining-philosophers"
    },
    {
        "name": "Airplane Seat Assignment Probability",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "airplane-seat-assignment-probability"
    },
    {
        "name": "Meeting Scheduler",
        "topic": "Array, Two Pointers, Sorting",
        "difficulty": "Medium",
        "link_id": "meeting-scheduler"
    },
    {
        "name": "Toss Strange Coins",
        "topic": "Dynamic Programming, Math",
        "difficulty": "Medium",
        "link_id": "toss-strange-coins"
    },
    {
        "name": "Divide Chocolate",
        "topic": "Binary Search, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "divide-chocolate"
    },
    {
        "name": "Check If It Is a Straight Line",
        "topic": "Geometry, Math",
        "difficulty": "Easy",
        "link_id": "check-if-it-is-a-straight-line"
    },
    {
        "name": "Remove Sub-Folders from the Filesystem",
        "topic": "String, Sorting",
        "difficulty": "Medium",
        "link_id": "remove-sub-folders-from-the-filesystem"
    },
    {
        "name": "Replace the Substring for Balanced String",
        "topic": "Two Pointers, String, Sliding Window",
        "difficulty": "Medium",
        "link_id": "replace-the-substring-for-balanced-string"
    },
    {
        "name": "Maximum Profit in Job Scheduling",
        "topic": "Dynamic Programming, Binary Search",
        "difficulty": "Hard",
        "link_id": "maximum-profit-in-job-scheduling"
    },
    {
        "name": "Web Crawler",
        "topic": "Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "web-crawler"
    },
    {
        "name": "Circular Permutation in Binary Representation",
        "topic": "Math, Backtracking, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "circular-permutation-in-binary-representation"
    },
    {
        "name": "Maximum Length of a Concatenated String with Unique Characters",
        "topic": "Backtracking, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "maximum-length-of-a-concatenated-string-with-unique-characters"
    },
    {
        "name": "Tiling a Rectangle with the Fewest Squares",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "tiling-a-rectangle-with-the-fewest-squares"
    },
    {
        "name": "Number of Comments per Post",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "number-of-comments-per-post"
    },
    {
        "name": "Design A Leaderboard",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-a-leaderboard"
    },
    {
        "name": "Tree Diameter",
        "topic": "Depth-First Search, Breadth-First Search, Graph",
        "difficulty": "Medium",
        "link_id": "tree-diameter"
    },
    {
        "name": "Palindrome Removal",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "palindrome-removal"
    },
    {
        "name": "Minimum Swaps to Make Strings Equal",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-swaps-to-make-strings-equal"
    },
    {
        "name": "Count Number of Nice Subarrays",
        "topic": "Two Pointers, Sliding Window",
        "difficulty": "Medium",
        "link_id": "count-number-of-nice-subarrays"
    },
    {
        "name": "Minimum Remove to Make Valid Parentheses",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "minimum-remove-to-make-valid-parentheses"
    },
    {
        "name": "Check If It Is a Good Array",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "check-if-it-is-a-good-array"
    },
    {
        "name": "Average Selling Price",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "average-selling-price"
    },
    {
        "name": "Cells with Odd Values in a Matrix",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "cells-with-odd-values-in-a-matrix"
    },
    {
        "name": "Reconstruct a 2-Row Binary Matrix",
        "topic": "Greedy, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "reconstruct-a-2-row-binary-matrix"
    },
    {
        "name": "Number of Closed Islands",
        "topic": "Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "number-of-closed-islands"
    },
    {
        "name": "Maximum Score Words Formed by Letters",
        "topic": "Bit Manipulation, Backtracking",
        "difficulty": "Hard",
        "link_id": "maximum-score-words-formed-by-letters"
    },
    {
        "name": "Encode Number",
        "topic": "Math, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "encode-number"
    },
    {
        "name": "Smallest Common Region",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "smallest-common-region"
    },
    {
        "name": "Synonymous Sentences",
        "topic": "String, Backtracking",
        "difficulty": "Medium",
        "link_id": "synonymous-sentences"
    },
    {
        "name": "Handshakes That Don't Cross",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "handshakes-that-dont-cross"
    },
    {
        "name": "Shift 2D Grid",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "shift-2d-grid"
    },
    {
        "name": "Find Elements in a Contaminated Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "find-elements-in-a-contaminated-binary-tree"
    },
    {
        "name": "Greatest Sum Divisible by Three",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "greatest-sum-divisible-by-three"
    },
    {
        "name": "Minimum Moves to Move a Box to Their Target Location",
        "topic": "Breadth-First Search, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "minimum-moves-to-move-a-box-to-their-target-location"
    },
    {
        "name": "Page Recommendations",
        "topic": "Database",
        "difficulty": "Medium",
        "link_id": "page-recommendations"
    },
    {
        "name": "Print Immutable Linked List in Reverse",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "print-immutable-linked-list-in-reverse"
    },
    {
        "name": "Minimum Time Visiting All Points",
        "topic": "Array, Geometry",
        "difficulty": "Easy",
        "link_id": "minimum-time-visiting-all-points"
    },
    {
        "name": "Count Servers that Communicate",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "count-servers-that-communicate"
    },
    {
        "name": "Search Suggestions System",
        "topic": "Array, String, Binary Search",
        "difficulty": "Medium",
        "link_id": "search-suggestions-system"
    },
    {
        "name": "Number of Ways to Stay in the Same Place After Some Steps",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-ways-to-stay-in-the-same-place-after-some-steps"
    },
    {
        "name": "Hexspeak",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "hexspeak"
    },
    {
        "name": "Remove Interval",
        "topic": "Line Sweep",
        "difficulty": "Medium",
        "link_id": "remove-interval"
    },
    {
        "name": "Delete Tree Nodes",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "delete-tree-nodes"
    },
    {
        "name": "Number of Ships in a Rectangle",
        "topic": "Math, Binary Search, Segment Tree",
        "difficulty": "Hard",
        "link_id": "number-of-ships-in-a-rectangle"
    },
    {
        "name": "Find Winner on a Tic Tac Toe Game",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-winner-on-a-tic-tac-toe-game"
    },
    {
        "name": "Number of Burgers with No Waste of Ingredients",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "number-of-burgers-with-no-waste-of-ingredients"
    },
    {
        "name": "Count Square Submatrices with All Ones",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "count-square-submatrices-with-all-ones"
    },
    {
        "name": "Palindrome Partitioning III",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "palindrome-partitioning-iii"
    },
    {
        "name": "Traffic Light Controlled Intersection",
        "topic": "Concurrency",
        "difficulty": "Easy",
        "link_id": "traffic-light-controlled-intersection"
    },
    {
        "name": "Students and Examinations",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "students-and-examinations"
    },
    {
        "name": "Subtract the Product and Sum of Digits of an Integer",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "subtract-the-product-and-sum-of-digits-of-an-integer"
    },
    {
        "name": "Group the People Given the Group Size They Belong To",
        "topic": "Greedy, Array",
        "difficulty": "Medium",
        "link_id": "group-the-people-given-the-group-size-they-belong-to"
    },
    {
        "name": "Find the Smallest Divisor Given a Threshold",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "find-the-smallest-divisor-given-a-threshold"
    },
    {
        "name": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "topic": "Dynamic Programming, Breadth-First Search",
        "difficulty": "Hard",
        "link_id": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix"
    },
    {
        "name": "Find the Start and End Number of Continuous Ranges",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "find-the-start-and-end-number-of-continuous-ranges"
    },
    {
        "name": "Iterator for Combination",
        "topic": "Backtracking, Design",
        "difficulty": "Medium",
        "link_id": "iterator-for-combination"
    },
    {
        "name": "Element Appearing More Than 25% In Sorted Array",
        "topic": "Array, Binary Search",
        "difficulty": "Easy",
        "link_id": "element-appearing-more-than-25-percent-in-sorted-array"
    },
    {
        "name": "Remove Covered Intervals",
        "topic": "Line Sweep, Greedy",
        "difficulty": "Medium",
        "link_id": "remove-covered-intervals"
    },
    {
        "name": "Minimum Falling Path Sum II",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "minimum-falling-path-sum-ii"
    },
    {
        "name": "Convert Binary Number in a Linked List to Integer",
        "topic": "Bit Manipulation, Linked List",
        "difficulty": "Easy",
        "link_id": "convert-binary-number-in-a-linked-list-to-integer"
    },
    {
        "name": "Sequential Digits",
        "topic": "Math, Backtracking",
        "difficulty": "Medium",
        "link_id": "sequential-digits"
    },
    {
        "name": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "topic": "Array, Dynamic Programming, Binary Search",
        "difficulty": "Medium",
        "link_id": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold"
    },
    {
        "name": "Shortest Path in a Grid with Obstacles Elimination",
        "topic": "Breadth-First Search, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "shortest-path-in-a-grid-with-obstacles-elimination"
    },
    {
        "name": "Weather Type in Each Country",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "weather-type-in-each-country"
    },
    {
        "name": "Find Numbers with Even Number of Digits",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-numbers-with-even-number-of-digits"
    },
    {
        "name": "Divide Array in Sets of K Consecutive Numbers",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "divide-array-in-sets-of-k-consecutive-numbers"
    },
    {
        "name": "Maximum Number of Occurrences of a Substring",
        "topic": "String, Sliding Window",
        "difficulty": "Medium",
        "link_id": "maximum-number-of-occurrences-of-a-substring"
    },
    {
        "name": "Maximum Candies You Can Get from Boxes",
        "topic": "Depth-First Search, Breadth-First Search, Topological Sort",
        "difficulty": "Hard",
        "link_id": "maximum-candies-you-can-get-from-boxes"
    },
    {
        "name": "Replace Elements with Greatest Element on Right Side",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "replace-elements-with-greatest-element-on-right-side"
    },
    {
        "name": "Sum of Mutated Array Closest to Target",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "sum-of-mutated-array-closest-to-target"
    },
    {
        "name": "Number of Paths with Max Score",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-paths-with-max-score"
    },
    {
        "name": "Deepest Leaves Sum",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "deepest-leaves-sum"
    },
    {
        "name": "Find the Team Size",
        "topic": "SQL",
        "difficulty": "Easy",
        "link_id": "find-the-team-size"
    },
    {
        "name": "Find N Unique Integers Sum up to Zero",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-n-unique-integers-sum-up-to-zero"
    },
    {
        "name": "All Elements in Two Binary Search Trees",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "all-elements-in-two-binary-search-trees"
    },
    {
        "name": "Jump Game III",
        "topic": "Breadth-First Search, Depth-First Search, Graph",
        "difficulty": "Medium",
        "link_id": "jump-game-iii"
    },
    {
        "name": "Verbal Arithmetic Puzzle",
        "topic": "Backtracking",
        "difficulty": "Hard",
        "link_id": "verbal-arithmetic-puzzle"
    },
    {
        "name": "Running Total for Different Genders",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "running-total-for-different-genders"
    },
    {
        "name": "Decrypt String from Alphabet to Integer Mapping",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "decrypt-string-from-alphabet-to-integer-mapping"
    },
    {
        "name": "XOR Queries of a Subarray",
        "topic": "Array, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "xor-queries-of-a-subarray"
    },
    {
        "name": "Get Watched Videos by Your Friends",
        "topic": "Depth-First Search, Breadth-First Search",
        "difficulty": "Medium",
        "link_id": "get-watched-videos-by-your-friends"
    },
    {
        "name": "Minimum Insertion Steps to Make a String Palindrome",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "minimum-insertion-steps-to-make-a-string-palindrome"
    },
    {
        "name": "Decompress Run-Length Encoded List",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "decompress-run-length-encoded-list"
    },
    {
        "name": "Matrix Block Sum",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "matrix-block-sum"
    },
    {
        "name": "Sum of Nodes with Even-Valued Grandparent",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "sum-of-nodes-with-even-valued-grandparent"
    },
    {
        "name": "Distinct Echo Substrings",
        "topic": "String",
        "difficulty": "Hard",
        "link_id": "distinct-echo-substrings"
    },
    {
        "name": "Convert Integer to the Sum of Two No-Zero Integers",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "convert-integer-to-the-sum-of-two-no-zero-integers"
    },
    {
        "name": "Number of Operations to Make Network Connected",
        "topic": "Depth-First Search, Breadth-First Search, Union Find",
        "difficulty": "Medium",
        "link_id": "number-of-operations-to-make-network-connected"
    },
    {
        "name": "Minimum Distance to Type a Word Using Two Fingers",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "minimum-distance-to-type-a-word-using-two-fingers"
    },
    {
        "name": "Restaurant Growth",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "restaurant-growth"
    },
    {
        "name": "Ads Performance",
        "topic": "SQL",
        "difficulty": "Medium",
        "link_id": "ads-performance"
    },
    {
        "name": "Maximum 69 Number",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "maximum-69-number"
    },
    {
        "name": "Print Words Vertically",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "print-words-vertically"
    },
    {
        "name": "Delete Leaves With a Given Value",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "delete-leaves-with-a-given-value"
    },
    {
        "name": "Minimum Number of Taps to Open to Water a Garden",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Hard",
        "link_id": "minimum-number-of-taps-to-open-to-water-a-garden"
    },
    {
        "name": "Circle and Rectangle Overlapping",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "circle-and-rectangle-overlapping"
    },
    {
        "name": "Reducing Dishes",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "reducing-dishes"
    },
    {
        "name": "Minimum Subsequence in Non-Increasing Order",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "minimum-subsequence-in-non-increasing-order"
    },
    {
        "name": "Number of Steps to Reduce a Number in Binary Representation to One",
        "topic": "Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one"
    },
    {
        "name": "Longest Happy String",
        "topic": "String, Greedy",
        "difficulty": "Medium",
        "link_id": "longest-happy-string"
    },
    {
        "name": "Stone Game III",
        "topic": "Dynamic Programming, Minimax",
        "difficulty": "Hard",
        "link_id": "stone-game-iii"
    },
    {
        "name": "String Matching in an Array",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "string-matching-in-an-array"
    },
    {
        "name": "Queries on a Permutation With Key",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "queries-on-a-permutation-with-key"
    },
    {
        "name": "HTML Entity Parser",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "html-entity-parser"
    },
    {
        "name": "Number of Ways to Paint N × 3 Grid",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-ways-to-paint-n-×-3-grid"
    },
    {
        "name": "Minimum Value to Get Positive Step by Step Sum",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "minimum-value-to-get-positive-step-by-step-sum"
    },
    {
        "name": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "topic": "Math, Greedy",
        "difficulty": "Medium",
        "link_id": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k"
    },
    {
        "name": "The k-th Lexicographical String of All Happy Strings of Length n",
        "topic": "Backtracking, String",
        "difficulty": "Medium",
        "link_id": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n"
    },
    {
        "name": "Restore The Array",
        "topic": "Dynamic Programming, Depth-First Search",
        "difficulty": "Hard",
        "link_id": "restore-the-array"
    },
    {
        "name": "Reformat The String",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reformat-the-string"
    },
    {
        "name": "Display Table of Food Orders in a Restaurant",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "display-table-of-food-orders-in-a-restaurant"
    },
    {
        "name": "Minimum Number of Frogs Croaking",
        "topic": "String, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-frogs-croaking"
    },
    {
        "name": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons"
    },
    {
        "name": "Maximum Score After Splitting a String",
        "topic": "String, Greedy",
        "difficulty": "Easy",
        "link_id": "maximum-score-after-splitting-a-string"
    },
    {
        "name": "Maximum Points You Can Obtain from Cards",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-points-you-can-obtain-from-cards"
    },
    {
        "name": "Diagonal Traverse II",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "diagonal-traverse-ii"
    },
    {
        "name": "Constrained Subset Sum",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "constrained-subset-sum"
    },
    {
        "name": "Perform String Shifts",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "perform-string-shifts"
    },
    {
        "name": "Leftmost Column with at Least a One",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "leftmost-column-with-at-least-a-one"
    },
    {
        "name": "First Unique Number",
        "topic": "Design, Linked List",
        "difficulty": "Medium",
        "link_id": "first-unique-number"
    },
    {
        "name": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree"
    },
    {
        "name": "Kids With the Greatest Number of Candies",
        "topic": "Array, Greedy",
        "difficulty": "Easy",
        "link_id": "kids-with-the-greatest-number-of-candies"
    },
    {
        "name": "Max Difference You Can Get From Changing an Integer",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "max-difference-you-can-get-from-changing-an-integer"
    },
    {
        "name": "Check If a String Can Break Another String",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "check-if-a-string-can-break-another-string"
    },
    {
        "name": "Number of Ways to Wear Different Hats to Each Other",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-ways-to-wear-different-hats-to-each-other"
    },
    {
        "name": "Create a Session Bar Chart",
        "topic": "Array, String",
        "difficulty": "Easy",
        "link_id": "create-a-session-bar-chart"
    },
    {
        "name": "Destination City",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "destination-city"
    },
    {
        "name": "Check If All 1's Are at Least Length K Places Away",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "check-if-all-1's-are-at-least-length-k-places-away"
    },
    {
        "name": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit"
    },
    {
        "name": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "topic": "Array, Binary Search",
        "difficulty": "Hard",
        "link_id": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows"
    },
    {
        "name": "Evaluate Boolean Expression",
        "topic": "Dynamic Programming, String",
        "difficulty": "Medium",
        "link_id": "evaluate-boolean-expression"
    },
    {
        "name": "Build an Array With Stack Operations",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "build-an-array-with-stack-operations"
    },
    {
        "name": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "topic": "Array, Bit Manipulation",
        "difficulty": "Medium",
        "link_id": "count-triplets-that-can-form-two-arrays-of-equal-xor"
    },
    {
        "name": "Minimum Time to Collect All Apples in a Tree",
        "topic": "Dynamic Programming, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "minimum-time-to-collect-all-apples-in-a-tree"
    },
    {
        "name": "Number of Ways of Cutting a Pizza",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-ways-of-cutting-a-pizza"
    },
    {
        "name": "Apples & Oranges",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "apples-&-oranges"
    },
    {
        "name": "Consecutive Characters",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "consecutive-characters"
    },
    {
        "name": "Simplified Fractions",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "simplified-fractions"
    },
    {
        "name": "Count Good Nodes in Binary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "count-good-nodes-in-binary-tree"
    },
    {
        "name": "Form Largest Integer With Digits That Add up to Target",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Hard",
        "link_id": "form-largest-integer-with-digits-that-add-up-to-target"
    },
    {
        "name": "Number of Students Doing Homework at a Given Time",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "number-of-students-doing-homework-at-a-given-time"
    },
    {
        "name": "Rearrange Words in a Sentence",
        "topic": "String, Sorting",
        "difficulty": "Medium",
        "link_id": "rearrange-words-in-a-sentence"
    },
    {
        "name": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list"
    },
    {
        "name": "Maximum Number of Darts Inside of a Circular Dartboard",
        "topic": "Math, Geometry",
        "difficulty": "Hard",
        "link_id": "maximum-number-of-darts-inside-of-a-circular-dartboard"
    },
    {
        "name": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence"
    },
    {
        "name": "Maximum Number of Vowels in a Substring of Given Length",
        "topic": "String, Sliding Window",
        "difficulty": "Medium",
        "link_id": "maximum-number-of-vowels-in-a-substring-of-given-length"
    },
    {
        "name": "Pseudo-Palindromic Paths in a Binary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "pseudo-palindromic-paths-in-a-binary-tree"
    },
    {
        "name": "Max Dot Product of Two Subsequences",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "max-dot-product-of-two-subsequences"
    },
    {
        "name": "Rectangles Area",
        "topic": "Math, Geometry",
        "difficulty": "Medium",
        "link_id": "rectangles-area"
    },
    {
        "name": "Check If Array Pairs Are Divisible by k",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "check-if-array-pairs-are-divisible-by-k"
    },
    {
        "name": "Number of Subsequences That Satisfy the Given Sum Condition",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "number-of-subsequences-that-satisfy-the-given-sum-condition"
    },
    {
        "name": "Max Value of Equation",
        "topic": "Array, Two Pointers",
        "difficulty": "Hard",
        "link_id": "max-value-of-equation"
    },
    {
        "name": "Design Browser History",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-browser-history"
    },
    {
        "name": "Paint House III",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "paint-house-iii"
    },
    {
        "name": "Final Prices With a Special Discount in a Shop",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "final-prices-with-a-special-discount-in-a-shop"
    },
    {
        "name": "Subrectangle Queries",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "subrectangle-queries"
    },
    {
        "name": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "find-two-non-overlapping-sub-arrays-each-with-target-sum"
    },
    {
        "name": "Allocate Mailboxes",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "allocate-mailboxes"
    },
    {
        "name": "Sales by Day of the Week",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "sales-by-day-of-the-week"
    },
    {
        "name": "Running Sum of 1d Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "running-sum-of-1d-array"
    },
    {
        "name": "Least Number of Unique Integers after K Removals",
        "topic": "Array, Sorting",
        "difficulty": "Medium",
        "link_id": "least-number-of-unique-integers-after-k-removals"
    },
    {
        "name": "Minimum Number of Days to Make m Bouquets",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-days-to-make-m-bouquets"
    },
    {
        "name": "Kth Ancestor of a Tree Node",
        "topic": "Tree",
        "difficulty": "Hard",
        "link_id": "kth-ancestor-of-a-tree-node"
    },
    {
        "name": "Group Sold Products By The Date",
        "topic": "String, Hash Table",
        "difficulty": "Easy",
        "link_id": "group-sold-products-by-the-date"
    },
    {
        "name": "Clone Binary Tree With Random Pointer",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "clone-binary-tree-with-random-pointer"
    },
    {
        "name": "XOR Operation in an Array",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "xor-operation-in-an-array"
    },
    {
        "name": "Making File Names Unique",
        "topic": "String, Array",
        "difficulty": "Medium",
        "link_id": "making-file-names-unique"
    },
    {
        "name": "Avoid Flood in The City",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "avoid-flood-in-the-city"
    },
    {
        "name": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "topic": "Graph, Union Find",
        "difficulty": "Hard",
        "link_id": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree"
    },
    {
        "name": "Clone N-ary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "clone-n-ary-tree"
    },
    {
        "name": "Average Salary Excluding the Minimum and Maximum Salary",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "average-salary-excluding-the-minimum-and-maximum-salary"
    },
    {
        "name": "The kth Factor of n",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "the-kth-factor-of-n"
    },
    {
        "name": "Longest Subarray of 1's After Deleting One Element",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "longest-subarray-of-1's-after-deleting-one-element"
    },
    {
        "name": "Parallel Courses II",
        "topic": "Graph, Topological Sort",
        "difficulty": "Hard",
        "link_id": "parallel-courses-ii"
    },
    {
        "name": "Friendly Movies Streamed Last Month",
        "topic": "String, Hash Table",
        "difficulty": "Easy",
        "link_id": "friendly-movies-streamed-last-month"
    },
    {
        "name": "Path Crossing",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "path-crossing"
    },
    {
        "name": "Check If Array Pairs Are Divisible by k",
        "topic": "Array, Math",
        "difficulty": "Medium",
        "link_id": "check-if-array-pairs-are-divisible-by-k"
    },
    {
        "name": "Number of Subsequences That Satisfy the Given Sum Condition",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "number-of-subsequences-that-satisfy-the-given-sum-condition"
    },
    {
        "name": "Max Value of Equation",
        "topic": "Array, Two Pointers",
        "difficulty": "Hard",
        "link_id": "max-value-of-equation"
    },
    {
        "name": "Design Browser History",
        "topic": "Design",
        "difficulty": "Medium",
        "link_id": "design-browser-history"
    },
    {
        "name": "Paint House III",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "paint-house-iii"
    },
    {
        "name": "Final Prices With a Special Discount in a Shop",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "final-prices-with-a-special-discount-in-a-shop"
    },
    {
        "name": "Subrectangle Queries",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "subrectangle-queries"
    },
    {
        "name": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "find-two-non-overlapping-sub-arrays-each-with-target-sum"
    },
    {
        "name": "Allocate Mailboxes",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "allocate-mailboxes"
    },
    {
        "name": "Sales by Day of the Week",
        "topic": "Array",
        "difficulty": "Hard",
        "link_id": "sales-by-day-of-the-week"
    },
    {
        "name": "Running Sum of 1d Array",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "running-sum-of-1d-array"
    },
    {
        "name": "Least Number of Unique Integers after K Removals",
        "topic": "Array, Sorting",
        "difficulty": "Medium",
        "link_id": "least-number-of-unique-integers-after-k-removals"
    },
    {
        "name": "Minimum Number of Days to Make m Bouquets",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-days-to-make-m-bouquets"
    },
    {
        "name": "Kth Ancestor of a Tree Node",
        "topic": "Tree",
        "difficulty": "Hard",
        "link_id": "kth-ancestor-of-a-tree-node"
    },
    {
        "name": "Group Sold Products By The Date",
        "topic": "String, Hash Table",
        "difficulty": "Easy",
        "link_id": "group-sold-products-by-the-date"
    },
    {
        "name": "Clone Binary Tree With Random Pointer",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "clone-binary-tree-with-random-pointer"
    },
    {
        "name": "XOR Operation in an Array",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "xor-operation-in-an-array"
    },
    {
        "name": "Making File Names Unique",
        "topic": "String, Array",
        "difficulty": "Medium",
        "link_id": "making-file-names-unique"
    },
    {
        "name": "Avoid Flood in The City",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "avoid-flood-in-the-city"
    },
    {
        "name": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "topic": "Graph, Union Find",
        "difficulty": "Hard",
        "link_id": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree"
    },
    {
        "name": "Clone N-ary Tree",
        "topic": "Tree, Depth-First Search",
        "difficulty": "Medium",
        "link_id": "clone-n-ary-tree"
    },
    {
        "name": "Average Salary Excluding the Minimum and Maximum Salary",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "average-salary-excluding-the-minimum-and-maximum-salary"
    },
    {
        "name": "The kth Factor of n",
        "topic": "Math",
        "difficulty": "Medium",
        "link_id": "the-kth-factor-of-n"
    },
    {
        "name": "Longest Subarray of 1's After Deleting One Element",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "longest-subarray-of-1's-after-deleting-one-element"
    },
    {
        "name": "Parallel Courses II",
        "topic": "Graph, Topological Sort",
        "difficulty": "Hard",
        "link_id": "parallel-courses-ii"
    },
    {
        "name": "Friendly Movies Streamed Last Month",
        "topic": "String, Hash Table",
        "difficulty": "Easy",
        "link_id": "friendly-movies-streamed-last-month"
    },
    {
        "name": "Path Crossing",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "path-crossing"
    },
    {
        "name": "Check If Array Pairs Are Divisible by k",
        "topic": "Array, Math",
        "difficulty": "Medium",
        "link_id": "check-if-array-pairs-are-divisible-by-k"
    },
    {
        "name": "Number of Subsequences That Satisfy the Given Sum Condition",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "number-of-subsequences-that-satisfy-the-given-sum-condition"
    },
    {
        "name": "Maximum Number of Achievable Transfer Requests",
        "topic": "Graph, Backtracking",
        "difficulty": "Hard",
        "link_id": "maximum-number-of-achievable-transfer-requests"
    },
    {
        "name": "Design Parking System",
        "topic": "Design",
        "difficulty": "Easy",
        "link_id": "design-parking-system"
    },
    {
        "name": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period"
    },
    {
        "name": "Find Valid Matrix Given Row and Column Sums",
        "topic": "Greedy, Array",
        "difficulty": "Medium",
        "link_id": "find-valid-matrix-given-row-and-column-sums"
    },
    {
        "name": "Find Servers That Handled Most Number of Requests",
        "topic": "Heap, Queue",
        "difficulty": "Hard",
        "link_id": "find-servers-that-handled-most-number-of-requests"
    },
    {
        "name": "Even Odd Tree",
        "topic": "Tree, Breadth-first Search",
        "difficulty": "Medium",
        "link_id": "even-odd-tree"
    },
    {
        "name": "Maximum Number of Visible Points",
        "topic": "Geometry, Sliding Window",
        "difficulty": "Medium",
        "link_id": "maximum-number-of-visible-points"
    },
    {
        "name": "Minimum One Bit Operations to Make Integers Zero",
        "topic": "Bit Manipulation, Recursion",
        "difficulty": "Hard",
        "link_id": "minimum-one-bit-operations-to-make-integers-zero"
    },
    {
        "name": "Find the Missing IDs",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "find-the-missing-ids"
    },
    {
        "name": "Maximum Nesting Depth of the Parentheses",
        "topic": "String, Greedy",
        "difficulty": "Easy",
        "link_id": "maximum-nesting-depth-of-the-parentheses"
    },
    {
        "name": "Maximal Network Rank",
        "topic": "Graph, Array",
        "difficulty": "Medium",
        "link_id": "maximal-network-rank"
    },
    {
        "name": "Split Two Strings to Make Palindrome",
        "topic": "Greedy, Two Pointers",
        "difficulty": "Medium",
        "link_id": "split-two-strings-to-make-palindrome"
    },
    {
        "name": "Count Subtrees With Max Distance Between Cities",
        "topic": "Tree, Depth-first Search",
        "difficulty": "Hard",
        "link_id": "count-subtrees-with-max-distance-between-cities"
    },
    {
        "name": "Mean of Array After Removing Some Elements",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "mean-of-array-after-removing-some-elements"
    },
    {
        "name": "Coordinate With Maximum Network Quality",
        "topic": "Array, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "coordinate-with-maximum-network-quality"
    },
    {
        "name": "Number of Sets of K Non-Overlapping Line Segments",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "number-of-sets-of-k-non-overlapping-line-segments"
    },
    {
        "name": "Fancy Sequence",
        "topic": "Math, Binary Search",
        "difficulty": "Hard",
        "link_id": "fancy-sequence"
    },
    {
        "name": "All Valid Triplets That Can Represent a Country",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "all-valid-triplets-that-can-represent-a-country"
    },
    {
        "name": "Largest Substring Between Two Equal Characters",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "largest-substring-between-two-equal-characters"
    },
    {
        "name": "Lexicographically Smallest String After Applying Operations",
        "topic": "String, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "lexicographically-smallest-string-after-applying-operations"
    },
    {
        "name": "Best Team With No Conflicts",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "best-team-with-no-conflicts"
    },
    {
        "name": "Graph Connectivity With Threshold",
        "topic": "Graph",
        "difficulty": "Hard",
        "link_id": "graph-connectivity-with-threshold"
    },
    {
        "name": "Slowest Key",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "slowest-key"
    },
    {
        "name": "Arithmetic Subarrays",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "arithmetic-subarrays"
    },
    {
        "name": "Path With Minimum Effort",
        "topic": "Depth-first Search, Union Find",
        "difficulty": "Medium",
        "link_id": "path-with-minimum-effort"
    },
    {
        "name": "Rank Transform of a Matrix",
        "topic": "Array, Sorting",
        "difficulty": "Hard",
        "link_id": "rank-transform-of-a-matrix"
    },
    {
        "name": "Percentage of Users Attended a Contest",
        "topic": "String, Hash Table",
        "difficulty": "Easy",
        "link_id": "percentage-of-users-attended-a-contest"
    },
    {
        "name": "Add Two Polynomials Represented as Linked Lists",
        "topic": "Linked List, Math",
        "difficulty": "Medium",
        "link_id": "add-two-polynomials-represented-as-linked-lists"
    },
    {
        "name": "Hopper Company Queries I",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "hopper-company-queries-i"
    },
    {
        "name": "Sort Array by Increasing Frequency",
        "topic": "Array, Sort",
        "difficulty": "Easy",
        "link_id": "sort-array-by-increasing-frequency"
    },
    {
        "name": "Widest Vertical Area Between Two Points Containing No Points",
        "topic": "Array, Sorting",
        "difficulty": "Medium",
        "link_id": "widest-vertical-area-between-two-points-containing-no-points"
    },
    {
        "name": "Count Substrings That Differ by One Character",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "count-substrings-that-differ-by-one-character"
    },
    {
        "name": "Number of Ways to Form a Target String Given a Dictionary",
        "topic": "Dynamic Programming, String",
        "difficulty": "Hard",
        "link_id": "number-of-ways-to-form-a-target-string-given-a-dictionary"
    },
    {
        "name": "Check Array Formation Through Concatenation",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "check-array-formation-through-concatenation"
    },
    {
        "name": "Count Sorted Vowel Strings",
        "topic": "Dynamic Programming, Backtracking",
        "difficulty": "Medium",
        "link_id": "count-sorted-vowel-strings"
    },
    {
        "name": "Furthest Building You Can Reach",
        "topic": "Greedy, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "furthest-building-you-can-reach"
    },
    {
        "name": "Kth Smallest Instructions",
        "topic": "Binary Search",
        "difficulty": "Hard",
        "link_id": "kth-smallest-instructions"
    },
    {
        "name": "Lowest Common Ancestor of a Binary Tree II",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "lowest-common-ancestor-of-a-binary-tree-ii"
    },
    {
        "name": "Hopper Company Queries II",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "hopper-company-queries-ii"
    },
    {
        "name": "Get Maximum in Generated Array",
        "topic": "Array, Simulation",
        "difficulty": "Easy",
        "link_id": "get-maximum-in-generated-array"
    },
    {
        "name": "Minimum Deletions to Make Character Frequencies Unique",
        "topic": "Greedy, Hash Table",
        "difficulty": "Medium",
        "link_id": "minimum-deletions-to-make-character-frequencies-unique"
    },
    {
        "name": "Sell Diminishing-Valued Colored Balls",
        "topic": "Binary Search, Greedy",
        "difficulty": "Medium",
        "link_id": "sell-diminishing-valued-colored-balls"
    },
    {
        "name": "Create Sorted Array through Instructions",
        "topic": "Binary Indexed Tree, Segment Tree",
        "difficulty": "Hard",
        "link_id": "create-sorted-array-through-instructions"
    },
    {
        "name": "Lowest Common Ancestor of a Binary Tree III",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "lowest-common-ancestor-of-a-binary-tree-iii"
    },
    {
        "name": "Hopper Company Queries III",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "hopper-company-queries-iii"
    },
    {
        "name": "Defuse the Bomb",
        "topic": "Array, Simulation",
        "difficulty": "Easy",
        "link_id": "defuse-the-bomb"
    },
    {
        "name": "Minimum Deletions to Make String Balanced",
        "topic": "String, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-deletions-to-make-string-balanced"
    },
    {
        "name": "Minimum Jumps to Reach Home",
        "topic": "Breadth-first Search, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-jumps-to-reach-home"
    },
    {
        "name": "Distribute Repeating Integers",
        "topic": "Array, Backtracking",
        "difficulty": "Hard",
        "link_id": "distribute-repeating-integers"
    },
    {
        "name": "Design an Ordered Stream",
        "topic": "Array, Design",
        "difficulty": "Easy",
        "link_id": "design-an-ordered-stream"
    },
    {
        "name": "Determine if Two Strings Are Close",
        "topic": "String, Hash Table",
        "difficulty": "Medium",
        "link_id": "determine-if-two-strings-are-close"
    },
    {
        "name": "Minimum Operations to Reduce X to Zero",
        "topic": "Math, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-operations-to-reduce-x-to-zero"
    },
    {
        "name": "Maximize Grid Happiness",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "maximize-grid-happiness"
    },
    {
        "name": "Correct a Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "correct-a-binary-tree"
    },
    {
        "name": "Average Time of Process per Machine",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "average-time-of-process-per-machine"
    },
    {
        "name": "Check If Two String Arrays are Equivalent",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "check-if-two-string-arrays-are-equivalent"
    },
    {
        "name": "Smallest String With A Given Numeric Value",
        "topic": "Greedy, Binary Search",
        "difficulty": "Medium",
        "link_id": "smallest-string-with-a-given-numeric-value"
    },
    {
        "name": "Ways to Make a Fair Array",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "ways-to-make-a-fair-array"
    },
    {
        "name": "Minimum Initial Energy to Finish Tasks",
        "topic": "Greedy, Sorting",
        "difficulty": "Hard",
        "link_id": "minimum-initial-energy-to-finish-tasks"
    },
    {
        "name": "Change the Root of a Binary Tree",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "change-the-root-of-a-binary-tree"
    },
    {
        "name": "Fix Names in a Table",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "fix-names-in-a-table"
    },
    {
        "name": "Maximum Repeating Substring",
        "topic": "String, Binary Search",
        "difficulty": "Easy",
        "link_id": "maximum-repeating-substring"
    },
    {
        "name": "Merge In Between Linked Lists",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "merge-in-between-linked-lists"
    },
    {
        "name": "Design Front Middle Back Queue",
        "topic": "Design, Linked List",
        "difficulty": "Medium",
        "link_id": "design-front-middle-back-queue"
    },
    {
        "name": "Minimum Number of Removals to Make Mountain Array",
        "topic": "Dynamic Programming, Binary Search",
        "difficulty": "Hard",
        "link_id": "minimum-number-of-removals-to-make-mountain-array"
    },
    {
        "name": "Richest Customer Wealth",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "richest-customer-wealth"
    },
    {
        "name": "Find the Most Competitive Subsequence",
        "topic": "Array, Stack",
        "difficulty": "Medium",
        "link_id": "find-the-most-competitive-subsequence"
    },
    {
        "name": "Minimum Moves to Make Array Complementary",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "minimum-moves-to-make-array-complementary"
    },
    {
        "name": "Minimize Deviation in Array",
        "topic": "Array, Heap",
        "difficulty": "Hard",
        "link_id": "minimize-deviation-in-array"
    },
    {
        "name": "Lowest Common Ancestor of a Binary Tree IV",
        "topic": "Tree",
        "difficulty": "Medium",
        "link_id": "lowest-common-ancestor-of-a-binary-tree-iv"
    },
    {
        "name": "Product's Worth Over Invoices",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "products-worth-over-invoices"
    },
    {
        "name": "Goal Parser Interpretation",
        "topic": "String, Simulation",
        "difficulty": "Easy",
        "link_id": "goal-parser-interpretation"
    },
    {
        "name": "Max Number of K-Sum Pairs",
        "topic": "Array, Two Pointers",
        "difficulty": "Medium",
        "link_id": "max-number-of-k-sum-pairs"
    },
    {
        "name": "Concatenation of Consecutive Binary Numbers",
        "topic": "Bit Manipulation, Math",
        "difficulty": "Medium",
        "link_id": "concatenation-of-consecutive-binary-numbers"
    },
    {
        "name": "Minimum Adjacent Swaps for K Consecutive Ones",
        "topic": "Sliding Window, Greedy",
        "difficulty": "Hard",
        "link_id": "minimum-adjacent-swaps-for-k-consecutive-ones"
    },
    {
        "name": "Determine if String Halves Are Alike",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "determine-if-string-halves-are-alike"
    },
    {
        "name": "Maximum Number of Eaten Apples",
        "topic": "Heap, Greedy",
        "difficulty": "Medium",
        "link_id": "maximum-number-of-eaten-apples"
    },
    {
        "name": "Where Will the Ball Fall",
        "topic": "Array, Simulation",
        "difficulty": "Medium",
        "link_id": "where-will-the-ball-fall"
    },
    {
        "name": "Maximum XOR With an Element From Array",
        "topic": "Array, Trie",
        "difficulty": "Hard",
        "link_id": "maximum-xor-with-an-element-from-array"
    },
    {
        "name": "Largest Subarray Length K",
        "topic": "Array, Sliding Window",
        "difficulty": "Easy",
        "link_id": "largest-subarray-length-k"
    },
    {
        "name": "Biggest Window Between Visits",
        "topic": "Array, Sliding Window",
        "difficulty": "Medium",
        "link_id": "biggest-window-between-visits"
    },
    {
        "name": "Maximum Number of Events That Can Be Attended II",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Hard",
        "link_id": "maximum-number-of-events-that-can-be-attended-ii"
    },
    {
        "name": "Check if Array Is Sorted and Rotated",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "check-if-array-is-sorted-and-rotated"
    },
    {
        "name": "Maximum Score From Removing Stones",
        "topic": "Greedy, Sorting",
        "difficulty": "Medium",
        "link_id": "maximum-score-from-removing-stones"
    },
    {
        "name": "Largest Merge Of Two Strings",
        "topic": "String, Greedy",
        "difficulty": "Medium",
        "link_id": "largest-merge-of-two-strings"
    },
    {
        "name": "Closest Subsequence Sum",
        "topic": "Binary Search, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "closest-subsequence-sum"
    },
    {
        "name": "Design Most Recently Used Queue",
        "topic": "Design, Queue",
        "difficulty": "Medium",
        "link_id": "design-most-recently-used-queue"
    },
    {
        "name": "Recyclable and Low Fat Products",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "recyclable-and-low-fat-products"
    },
    {
        "name": "Minimum Changes To Make Alternating Binary String",
        "topic": "Greedy, String",
        "difficulty": "Easy",
        "link_id": "minimum-changes-to-make-alternating-binary-string"
    },
    {
        "name": "Count Number of Homogenous Substrings",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "count-number-of-homogenous-substrings"
    },
    {
        "name": "Minimum Limit of Balls in a Bag",
        "topic": "Binary Search",
        "difficulty": "Medium",
        "link_id": "minimum-limit-of-balls-in-a-bag"
    },
    {
        "name": "Minimum Degree of a Connected Trio in a Graph",
        "topic": "Graph",
        "difficulty": "Hard",
        "link_id": "minimum-degree-of-a-connected-trio-in-a-graph"
    },
    {
        "name": "Longest Nice Substring",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "longest-nice-substring"
    },
    {
        "name": "Form Array by Concatenating Subarrays of Another Array",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "form-array-by-concatenating-subarrays-of-another-array"
    },
    {
        "name": "Map of Highest Peak",
        "topic": "Breadth-first Search, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "map-of-highest-peak"
    },
    {
        "name": "Tree of Coprimes",
        "topic": "Math, Tree",
        "difficulty": "Hard",
        "link_id": "tree-of-coprimes"
    },
    {
        "name": "Find the Subtasks That Did Not Execute",
        "topic": "String",
        "difficulty": "Hard",
        "link_id": "find-the-subtasks-that-did-not-execute"
    },
    {
        "name": "Merge Strings Alternately",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "merge-strings-alternately"
    },
    {
        "name": "Minimum Number of Operations to Move All Balls to Each Box",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-operations-to-move-all-balls-to-each-box"
    },
    {
        "name": "Maximum Score from Performing Multiplication Operations",
        "topic": "Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "maximum-score-from-performing-multiplication-operations"
    },
    {
        "name": "Maximize Palindrome Length From Subsequences",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "maximize-palindrome-length-from-subsequences"
    },
    {
        "name": "Sort Features by Popularity",
        "topic": "Array, Hash Table, Sort",
        "difficulty": "Medium",
        "link_id": "sort-features-by-popularity"
    },
    {
        "name": "Count Items Matching a Rule",
        "topic": "Array, String",
        "difficulty": "Easy",
        "link_id": "count-items-matching-a-rule"
    },
    {
        "name": "Closest Dessert Cost",
        "topic": "Array, Backtracking",
        "difficulty": "Medium",
        "link_id": "closest-dessert-cost"
    },
    {
        "name": "Equal Sum Arrays With Minimum Number of Operations",
        "topic": "Greedy, Math",
        "difficulty": "Medium",
        "link_id": "equal-sum-arrays-with-minimum-number-of-operations"
    },
    {
        "name": "Car Fleet II",
        "topic": "Array, Stack",
        "difficulty": "Hard",
        "link_id": "car-fleet-ii"
    },
    {
        "name": "Product's Price for Each Store",
        "topic": "Array, String",
        "difficulty": "Easy",
        "link_id": "products-price-for-each-store"
    },
    {
        "name": "Shortest Path in a Hidden Grid",
        "topic": "Breadth-first Search, Graph",
        "difficulty": "Medium",
        "link_id": "shortest-path-in-a-hidden-grid"
    },
    {
        "name": "Find Nearest Point That Has the Same X or Y Coordinate",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "find-nearest-point-that-has-the-same-x-or-y-coordinate"
    },
    {
        "name": "Check if Number is a Sum of Powers of Three",
        "topic": "Math, Recursion",
        "difficulty": "Medium",
        "link_id": "check-if-number-is-a-sum-of-powers-of-three"
    },
    {
        "name": "Sum of Beauty of All Substrings",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "sum-of-beauty-of-all-substrings"
    },
    {
        "name": "Count Pairs Of Nodes",
        "topic": "Tree",
        "difficulty": "Hard",
        "link_id": "count-pairs-of-nodes"
    },
    {
        "name": "Grand Slam Titles",
        "topic": "Hash Table, String",
        "difficulty": "Medium",
        "link_id": "grand-slam-titles"
    },
    {
        "name": "Check if Binary String Has at Most One Segment of Ones",
        "topic": "String, Greedy",
        "difficulty": "Easy",
        "link_id": "check-if-binary-string-has-at-most-one-segment-of-ones"
    },
    {
        "name": "Minimum Elements to Add to Form a Given Sum",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-elements-to-add-to-form-a-given-sum"
    },
    {
        "name": "Number of Restricted Paths From First to Last Node",
        "topic": "Dynamic Programming, Graph",
        "difficulty": "Medium",
        "link_id": "number-of-restricted-paths-from-first-to-last-node"
    },
    {
        "name": "Make the XOR of All Segments Equal to Zero",
        "topic": "Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "make-the-xor-of-all-segments-equal-to-zero"
    },
    {
        "name": "Maximize the Beauty of the Garden",
        "topic": "Array, Greedy",
        "difficulty": "Hard",
        "link_id": "maximize-the-beauty-of-the-garden"
    },
    {
        "name": "Primary Department for Each Employee",
        "topic": "Hash Table, String",
        "difficulty": "Easy",
        "link_id": "primary-department-for-each-employee"
    },
    {
        "name": "Check if One String Swap Can Make Strings Equal",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "check-if-one-string-swap-can-make-strings-equal"
    },
    {
        "name": "Find Center of Star Graph",
        "topic": "Graph",
        "difficulty": "Medium",
        "link_id": "find-center-of-star-graph"
    },
    {
        "name": "Maximum Average Pass Ratio",
        "topic": "Greedy",
        "difficulty": "Medium",
        "link_id": "maximum-average-pass-ratio"
    },
    {
        "name": "Maximum Score of a Good Subarray",
        "topic": "Greedy, Binary Search",
        "difficulty": "Hard",
        "link_id": "maximum-score-of-a-good-subarray"
    },
    {
        "name": "Number Of Ways To Reconstruct A Tree",
        "topic": "Graph, Tree",
        "difficulty": "Hard",
        "link_id": "number-of-ways-to-reconstruct-a-tree"
    },
    {
        "name": "Decode XORed Array",
        "topic": "Bit Manipulation",
        "difficulty": "Easy",
        "link_id": "decode-xored-array"
    },
    {
        "name": "Swapping Nodes in a Linked List",
        "topic": "Linked List",
        "difficulty": "Hard",
        "link_id": "swapping-nodes-in-a-linked-list"
    },
    {
        "name": "Minimize Hamming Distance After Swap Operations",
        "topic": "Greedy, Union Find",
        "difficulty": "Medium",
        "link_id": "minimize-hamming-distance-after-swap-operations"
    },
    {
        "name": "Find Minimum Time to Finish All Jobs",
        "topic": "Backtracking, Binary Search",
        "difficulty": "Hard",
        "link_id": "find-minimum-time-to-finish-all-jobs"
    },
    {
        "name": "Checking Existence of Edge Length Limited Paths II",
        "topic": "Graph, Union Find",
        "difficulty": "Hard",
        "link_id": "checking-existence-of-edge-length-limited-paths-ii"
    },
    {
        "name": "Number Of Rectangles That Can Form The Largest Square",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Easy",
        "link_id": "number-of-rectangles-that-can-form-the-largest-square"
    },
    {
        "name": "Tuple with Same Product",
        "topic": "Array, Hash Table, Math",
        "difficulty": "Medium",
        "link_id": "tuple-with-same-product"
    },
    {
        "name": "Largest Submatrix With Rearrangements",
        "topic": "Dynamic Programming, Greedy",
        "difficulty": "Medium",
        "link_id": "largest-submatrix-with-rearrangements"
    },
    {
        "name": "Cat and Mouse II",
        "topic": "Dynamic Programming, Graph",
        "difficulty": "Hard",
        "link_id": "cat-and-mouse-ii"
    },
    {
        "name": "Find Followers Count",
        "topic": "Database",
        "difficulty": "Easy",
        "link_id": "find-followers-count"
    },
    {
        "name": "Shortest Path to Get Food",
        "topic": "Breadth-first Search, Graph",
        "difficulty": "Medium",
        "link_id": "shortest-path-to-get-food"
    },
    {
        "name": "The Number of Employees Which Report to Each Employee",
        "topic": "Breadth-first Search, Depth-first Search",
        "difficulty": "Easy",
        "link_id": "the-number-of-employees-which-report-to-each-employee"
    },
    {
        "name": "Find the Highest Altitude",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "find-the-highest-altitude"
    },
    {
        "name": "Minimum Number of People to Teach",
        "topic": "Graph, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-people-to-teach"
    },
    {
        "name": "Decode XORed Permutation",
        "topic": "Bit Manipulation, Math",
        "difficulty": "Medium",
        "link_id": "decode-xored-permutation"
    },
    {
        "name": "Count Ways to Make Array With Product",
        "topic": "Array, Math",
        "difficulty": "Hard",
        "link_id": "count-ways-to-make-array-with-product"
    },
    {
        "name": "Latest Time by Replacing Hidden Digits",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "latest-time-by-replacing-hidden-digits"
    },
    {
        "name": "Change Minimum Characters to Satisfy One of Three Conditions",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "change-minimum-characters-to-satisfy-one-of-three-conditions"
    },
    {
        "name": "Find Kth Largest XOR Coordinate Value",
        "topic": "Array, Sort",
        "difficulty": "Medium",
        "link_id": "find-kth-largest-xor-coordinate-value"
    },
    {
        "name": "Building Boxes",
        "topic": "Dynamic Programming, Math",
        "difficulty": "Hard",
        "link_id": "building-boxes"
    },
    {
        "name": "Find Distance in a Binary Tree",
        "topic": "Binary Tree",
        "difficulty": "Medium",
        "link_id": "find-distance-in-a-binary-tree"
    },
    {
        "name": "Maximum Erasure Value",
        "topic": "Hash Table, Two Pointers",
        "difficulty": "Medium",
        "link_id": "maximum-erasure-value"
    },
    {
        "name": "Reformat Phone Number",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "reformat-phone-number"
    },
    {
        "name": "Maximum Number of Balls in a Box",
        "topic": "Array, Math",
        "difficulty": "Easy",
        "link_id": "maximum-number-of-balls-in-a-box"
    },
    {
        "name": "Restore the Array From Adjacent Pairs",
        "topic": "Array, Depth-first Search",
        "difficulty": "Medium",
        "link_id": "restore-the-array-from-adjacent-pairs"
    },
    {
        "name": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "topic": "Array, Prefix Sum",
        "difficulty": "Medium",
        "link_id": "can-you-eat-your-favorite-candy-on-your-favorite-day"
    },
    {
        "name": "Number of Orders in the Backlog",
        "topic": "Array, Heap",
        "difficulty": "Medium",
        "link_id": "number-of-orders-in-the-backlog"
    },
    {
        "name": "Maximum Value at a Given Index in a Bounded Array",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "maximum-value-at-a-given-index-in-a-bounded-array"
    },
    {
        "name": "Count Pairs With XOR in a Range",
        "topic": "Array, Bit Manipulation, Trie",
        "difficulty": "Hard",
        "link_id": "count-pairs-with-xor-in-a-range"
    },
    {
        "name": "Number of Different Integers in a String",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "number-of-different-integers-in-a-string"
    },
    {
        "name": "Minimum Number of Operations to Reinitialize a Permutation",
        "topic": "Array, Simulation",
        "difficulty": "Medium",
        "link_id": "minimum-number-of-operations-to-reinitialize-a-permutation"
    },
    {
        "name": "Evaluate the Bracket Pairs of a String",
        "topic": "String, Stack",
        "difficulty": "Medium",
        "link_id": "evaluate-the-bracket-pairs-of-a-string"
    },
    {
        "name": "Maximize Number of Nice Divisors",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "maximize-number-of-nice-divisors"
    },
    {
        "name": "Sentence Similarity III",
        "topic": "String",
        "difficulty": "Medium",
        "link_id": "sentence-similarity-iii"
    },
    {
        "name": "Count Nice Pairs in an Array",
        "topic": "Array, Hash Table, Math",
        "difficulty": "Medium",
        "link_id": "count-nice-pairs-in-an-array"
    },
    {
        "name": "Maximum Number of Groups Getting Fresh Donuts",
        "topic": "Math, Greedy, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "maximum-number-of-groups-getting-fresh-donuts"
    },
    {
        "name": "Truncate Sentence",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "truncate-sentence"
    },
    {
        "name": "Finding the Users Active Minutes",
        "topic": "Array, Hash Table",
        "difficulty": "Medium",
        "link_id": "finding-the-users-active-minutes"
    },
    {
        "name": "Minimum Absolute Sum Difference",
        "topic": "Array, Binary Search, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-absolute-sum-difference"
    },
    {
        "name": "Number of Different Subsequences GCDs",
        "topic": "Math, Dynamic Programming",
        "difficulty": "Hard",
        "link_id": "number-of-different-subsequences-gcds"
    },
    {
        "name": "Find the Winner of the Circular Game",
        "topic": "Array, Simulation",
        "difficulty": "Medium",
        "link_id": "find-the-winner-of-the-circular-game"
    },
    {
        "name": "Minimum Sideway Jumps",
        "topic": "Array, Dynamic Programming",
        "difficulty": "Medium",
        "link_id": "minimum-sideway-jumps"
    },
    {
        "name": "Finding MK Average",
        "topic": "Ordered Map, Segment Tree, Binary Search Tree, Balanced Tree, Heap",
        "difficulty": "Hard",
        "link_id": "finding-mk-average"
    },
    {
        "name": "Minimum Operations to Make the Array Increasing",
        "topic": "Array, Dynamic Programming, Greedy",
        "difficulty": "Easy",
        "link_id": "minimum-operations-to-make-the-array-increasing"
    },
    {
        "name": "Queries on Number of Points Inside a Circle",
        "topic": "Geometry",
        "difficulty": "Medium",
        "link_id": "queries-on-number-of-points-inside-a-circle"
    },
    {
        "name": "Maximum XOR for Each Query",
        "topic": "Bit Manipulation, Trie",
        "difficulty": "Medium",
        "link_id": "maximum-xor-for-each-query"
    },
    {
        "name": "Minimum Number of Operations to Make String Sorted",
        "topic": "String, Greedy",
        "difficulty": "Hard",
        "link_id": "minimum-number-of-operations-to-make-string-sorted"
    },
    {
        "name": "Maximum Transaction Each Day",
        "topic": "Array, Greedy",
        "difficulty": "Medium",
        "link_id": "maximum-transaction-each-day"
    },
    {
        "name": "Check if the Sentence Is Pangram",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "check-if-the-sentence-is-pangram"
    },
    {
        "name": "Maximum Ice Cream Bars",
        "topic": "Array, Greedy, Sorting",
        "difficulty": "Medium",
        "link_id": "maximum-ice-cream-bars"
    },
    {
        "name": "Single-Threaded CPU",
        "topic": "Heap, Greedy, Sorting, Queue",
        "difficulty": "Medium",
        "link_id": "single-threaded-cpu"
    },
    {
        "name": "Find XOR Sum of All Pairs Bitwise AND",
        "topic": "Bit Manipulation, Array, Hash Table, Trie",
        "difficulty": "Hard",
        "link_id": "find-xor-sum-of-all-pairs-bitwise-and"
    },
    {
        "name": "Remove Duplicates From an Unsorted Linked List",
        "topic": "Linked List",
        "difficulty": "Medium",
        "link_id": "remove-duplicates-from-an-unsorted-linked-list"
    },
    {
        "name": "Sum of Digits in Base K",
        "topic": "Math",
        "difficulty": "Easy",
        "link_id": "sum-of-digits-in-base-k"
    },
    {
        "name": "Frequency of the Most Frequent Element",
        "topic": "Array, Sorting, Sliding Window",
        "difficulty": "Medium",
        "link_id": "frequency-of-the-most-frequent-element"
    },
    {
        "name": "Longest Substring Of All Vowels in Order",
        "topic": "String, Two Pointers",
        "difficulty": "Medium",
        "link_id": "longest-substring-of-all-vowels-in-order"
    },
    {
        "name": "Maximum Building Height",
        "topic": "Array, Binary Search, Greedy",
        "difficulty": "Hard",
        "link_id": "maximum-building-height"
    },
    {
        "name": "League Statistics",
        "topic": "Array",
        "difficulty": "Medium",
        "link_id": "league-statistics"
    },
    {
        "name": "Next Palindrome Using Same Digits",
        "topic": "Math",
        "difficulty": "Hard",
        "link_id": "next-palindrome-using-same-digits"
    },
    {
        "name": "Suspicious Bank Accounts",
        "topic": "Array, String, Hash Table",
        "difficulty": "Medium",
        "link_id": "suspicious-bank-accounts"
    },
    {
        "name": "Replace All Digits with Characters",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "replace-all-digits-with-characters"
    },
    {
        "name": "Seat Reservation Manager",
        "topic": "Design, Heap",
        "difficulty": "Medium",
        "link_id": "seat-reservation-manager"
    },
    {
        "name": "Maximum Element After Decreasing and Rearranging",
        "topic": "Array, Greedy, Sorting",
        "difficulty": "Medium",
        "link_id": "maximum-element-after-decreasing-and-rearranging"
    },
    {
        "name": "Closest Room",
        "topic": "Array, Binary Search",
        "difficulty": "Hard",
        "link_id": "closest-room"
    },
    {
        "name": "Minimum Distance to the Target Element",
        "topic": "Array, Binary Search",
        "difficulty": "Easy",
        "link_id": "minimum-distance-to-the-target-element"
    },
    {
        "name": "Splitting a String Into Descending Consecutive Values",
        "topic": "String, Backtracking",
        "difficulty": "Medium",
        "link_id": "splitting-a-string-into-descending-consecutive-values"
    },
    {
        "name": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "topic": "String, Greedy",
        "difficulty": "Medium",
        "link_id": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number"
    },
    {
        "name": "Minimum Interval to Include Each Query",
        "topic": "Array, Binary Search, Greedy, Sorting",
        "difficulty": "Hard",
        "link_id": "minimum-interval-to-include-each-query"
    },
    {
        "name": "Distinct Numbers in Each Subarray",
        "topic": "Array, Hash Table, Sliding Window",
        "difficulty": "Medium",
        "link_id": "distinct-numbers-in-each-subarray"
    },
    {
        "name": "Convert Date Format",
        "topic": "String",
        "difficulty": "Easy",
        "link_id": "convert-date-format"
    },
    {
        "name": "Maximum Population Year",
        "topic": "Array",
        "difficulty": "Easy",
        "link_id": "maximum-population-year"
    },
    {
        "name": "Maximum Distance Between a Pair of Values",
        "topic": "Array, Binary Search",
        "difficulty": "Medium",
        "link_id": "maximum-distance-between-a-pair-of-values"
    },
    {
        "name": "Maximum Subarray Min-Product",
        "topic": "Array, Stack",
        "difficulty": "Medium",
        "link_id": "maximum-subarray-min-product"
    },
    {
        "name": "Largest Color Value in a Directed Graph",
        "topic": "Dynamic Programming, Graph",
        "difficulty": "Hard",
        "link_id": "largest-color-value-in-a-directed-graph"
    }
]